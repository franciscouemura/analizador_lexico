/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package analizador_lexico;

import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;
import org.fife.ui.rtextarea.RTextScrollPane;

/**
 *
 * @author framc
 */
public class Principal extends javax.swing.JFrame {

    public RTextScrollPane sp;
    public RSyntaxTextArea fonte;
    int nivel;
    TabelaSimbolos tabelaSimbolos;
    ArrayList<Integer> offsetVariavel = new ArrayList<>();
    ArrayList<String> rotulosData = new ArrayList<>();
    public String codigoAssembly;
    public int variaveisLocais;
    Registro registroGlobal;
    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        
        this.setLocationRelativeTo(null);
        
        fonte = new RSyntaxTextArea(20,60);
        fonte.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_DELPHI);
        fonte.setCodeFoldingEnabled(true);
        
        sp = new RTextScrollPane(fonte);
        sp.setName("Fonte");
        jTabbedPanePainel.add(sp, 0);
        jTabbedPanePainel.setSelectedIndex(0);
    }

    int linha = 0;
    int coluna = 0;
    int index = 0;
    int lastLine = 0;
    String texto;
    Lexema lexema;
    Boolean erro = false;
    String errorDescription;
    private ArrayList<String> palavrasReservadas = new ArrayList<>();
    private ArrayList<Lexema> detTipo = new ArrayList<>();
    int contadorRotulos =0;
    ItemTabela[] table = new ItemTabela[17];
    
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonNovo = new javax.swing.JButton();
        jButtonAbrir = new javax.swing.JButton();
        jButtonSalvar = new javax.swing.JButton();
        jButtonCompilar = new javax.swing.JButton();
        jButtonExecutar = new javax.swing.JButton();
        jButtonSair = new javax.swing.JButton();
        jTabbedPanePainel = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableTabelaDeSimbolos = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextAreaItensLexicos = new javax.swing.JTextArea();
        textAreaAssembly = new java.awt.TextArea();
        label1 = new java.awt.Label();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        textAreaMensagens = new java.awt.TextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuArquivo = new javax.swing.JMenu();
        jMenuItemNovo = new javax.swing.JMenuItem();
        jMenuItemAbrir = new javax.swing.JMenuItem();
        jMenuItemFechar = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemSalvar = new javax.swing.JMenuItem();
        jMenuItemSalvarComo = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItemSair = new javax.swing.JMenuItem();
        jMenuProjeto = new javax.swing.JMenu();
        jMenuItemCompilar = new javax.swing.JMenuItem();
        jMenuItemExecutar = new javax.swing.JMenuItem();
        jMenuSobre = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jButtonNovo.setText("Novo");
        jButtonNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNovoActionPerformed(evt);
            }
        });

        jButtonAbrir.setText("Abrir");

        jButtonSalvar.setText("Salvar");

        jButtonCompilar.setText("Compilar");
        jButtonCompilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCompilarActionPerformed(evt);
            }
        });

        jButtonExecutar.setText("Executar");
        jButtonExecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExecutarActionPerformed(evt);
            }
        });

        jButtonSair.setText("Sair");

        jTabbedPanePainel.setToolTipText("");

        jTableTabelaDeSimbolos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTableTabelaDeSimbolos);

        jTabbedPanePainel.addTab("Tabela de Simbolos", jScrollPane2);

        jTextAreaItensLexicos.setColumns(20);
        jTextAreaItensLexicos.setRows(5);
        jScrollPane3.setViewportView(jTextAreaItensLexicos);

        jTabbedPanePainel.addTab("Iten LÃ©xicos", jScrollPane3);
        jTabbedPanePainel.addTab("Assembly", textAreaAssembly);

        label1.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        label1.setText("Mensagem");

        filler2.setBackground(new java.awt.Color(255, 255, 255));
        filler2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jMenuArquivo.setText("Arquivo");

        jMenuItemNovo.setText("Novo");
        jMenuArquivo.add(jMenuItemNovo);

        jMenuItemAbrir.setText("Abrir");
        jMenuArquivo.add(jMenuItemAbrir);

        jMenuItemFechar.setText("Fechar");
        jMenuArquivo.add(jMenuItemFechar);
        jMenuArquivo.add(jSeparator1);

        jMenuItemSalvar.setText("Salvar");
        jMenuArquivo.add(jMenuItemSalvar);

        jMenuItemSalvarComo.setText("Salvar como");
        jMenuArquivo.add(jMenuItemSalvarComo);
        jMenuArquivo.add(jSeparator2);

        jMenuItemSair.setText("Sair");
        jMenuArquivo.add(jMenuItemSair);

        jMenuBar1.add(jMenuArquivo);

        jMenuProjeto.setText("Projeto");

        jMenuItemCompilar.setText("Compilar");
        jMenuProjeto.add(jMenuItemCompilar);

        jMenuItemExecutar.setText("Executar");
        jMenuProjeto.add(jMenuItemExecutar);

        jMenuBar1.add(jMenuProjeto);

        jMenuSobre.setText("Sobre");
        jMenuBar1.add(jMenuSobre);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPanePainel, javax.swing.GroupLayout.DEFAULT_SIZE, 877, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonNovo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAbrir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonSalvar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonCompilar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonExecutar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSair))
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(filler2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(textAreaMensagens, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonNovo)
                    .addComponent(jButtonAbrir)
                    .addComponent(jButtonSalvar)
                    .addComponent(jButtonCompilar)
                    .addComponent(jButtonExecutar)
                    .addComponent(jButtonSair))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPanePainel, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, 1, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textAreaMensagens, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        label1.getAccessibleContext().setAccessibleName("labelMensagem");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonExecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExecutarActionPerformed

    }//GEN-LAST:event_jButtonExecutarActionPerformed

    private void jButtonCompilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCompilarActionPerformed
        contadorRotulos =0;
        offsetVariavel = new ArrayList(); 
        variaveisLocais=0;
         nivel = 0;
         rotulosData = new ArrayList<>();
        codigoAssembly = "";
        textAreaMensagens.setText("");
        texto = fonte.getText().toString();
        jTableTabelaDeSimbolos.removeAll();
        table = null;
        table = new ItemTabela[17];
        lexema = analisadorLexico(texto);
        programa();
        if(!erro)
            textAreaMensagens.setText("Compilado com sucesso!\n");
        index = 0;
        linha = 0;
        coluna = 0;
        erro = false;
        imprimeTabela();
        rodaAsm();
        textAreaAssembly.setText(codigoAssembly);
    
        
    }//GEN-LAST:event_jButtonCompilarActionPerformed

    private void jButtonNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNovoActionPerformed
        fonte.setText("");
        jTextAreaItensLexicos.setText("");
    }//GEN-LAST:event_jButtonNovoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
            UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Principal p = new Principal();
                p.setVisible(true);
                p.palavrasReservadas.add("program");
                p.palavrasReservadas.add("begin");
                p.palavrasReservadas.add("end");
                p.palavrasReservadas.add("var");
                p.palavrasReservadas.add("integer");
                p.palavrasReservadas.add("real");
                p.palavrasReservadas.add("array");
                p.palavrasReservadas.add("of");
                p.palavrasReservadas.add("procedure");
                p.palavrasReservadas.add("function");
                p.palavrasReservadas.add("read");
                p.palavrasReservadas.add("write");
                p.palavrasReservadas.add("writeln");
                p.palavrasReservadas.add("for");
                p.palavrasReservadas.add("to");
                p.palavrasReservadas.add("do");
                p.palavrasReservadas.add("until");
                p.palavrasReservadas.add("repeat");
                p.palavrasReservadas.add("while");
                p.palavrasReservadas.add("if");
                p.palavrasReservadas.add("then");
                p.palavrasReservadas.add("else"); 
                p.palavrasReservadas.add("or");
                p.palavrasReservadas.add("and");
                p.palavrasReservadas.add("not");
                p.palavrasReservadas.add("true");
                p.palavrasReservadas.add("false");
                
            }
        });
        
        
        
        
    }

    public Lexema analisadorLexico(String texto) {
        Lexema item=null;
        if(index < texto.length()){
            while(texto.charAt(index) <= ' ' && index < texto.length()){
                if(texto.charAt(index) == '\n'){
                    linha++;
                    lastLine = index + 1;
                }
                index++;
            }
            String a = String.format("%c", texto.charAt(index));
            if (texto.charAt(index) > ' ' && index < texto.length()) {
                coluna = index-lastLine;
                item = classifica(a);
                jTextAreaItensLexicos.setText(
                        String.format("%s(Linha: %d, Coluna: %d) - %s - %s = %s\n",
                                jTextAreaItensLexicos.getText(),
                                 item.getLinha()+1, 
                                item.getColuna()+1, 
                                item.getDescricao(),
                                item.getClasse(),
                                item.getTexto())
                );
            }
        }
        return item;
    }

    public Lexema classifica(String a) {
        Lexema item = null;
        if (a.matches("[a-zA-Z]")) {
            item = identificador();
        } else {
            System.out.println("ok4");
            if (a.matches("\\d")) {
                System.out.println("ok5");
                item = numero();
                System.out.println("ok6");
            } else {
                if (a.equals("\'")) {
                    item = string();
                } else {
                    if (a.equals(":")) {
                        if (texto.charAt(index + 1) == '=') {
                            item = new Lexema(String.format("%c%c", texto.charAt(index), texto.charAt(index + 1)), "cAtr", "AtribuiÃ§Ã£o", linha, coluna);
                            index = index + 2;
                        } else {
                            item = new Lexema(a, "cDPto", "Dois Pontos", linha, coluna);
                            index++;
                        }
                    } else {
                        if (a.equals("(")) {
                            item = new Lexema(a, "cLPar", "Abre ParÃªnteses", linha, coluna);
                            index++;
                        } else {
                            if (a.equals(")")) {
                                item = new Lexema(a, "cRPar", "Fecha ParÃªnteses", linha, coluna);
                                index++;
                            } else {
                                if (a.equals("+")) {
                                    item = new Lexema(a, "cAdd", "AdiÃ§Ã£o", linha, coluna);
                                    index++;
                                } else {
                                    if (a.equals("-")) {
                                        item = new Lexema(a, "cSub", "SubtraÃ§Ã£o", linha, coluna);
                                        index++;
                                    } else {
                                        if (a.equals("*")) {
                                            item = new Lexema(a, "cMul", "MultiplicaÃ§Ã£o", linha, coluna);
                                            index++;
                                        } else {
                                            if (a.equals("/")) {
                                                item = new Lexema(a, "cDiv", "DivisÃ£o", linha, coluna);
                                                index++;
                                            } else {
                                                if (a.equals("=")) {
                                                    item = new Lexema(a, "cEQ", "Igual", linha, coluna);
                                                    index++;
                                                } else {
                                                    if (a.equals("<")) {
                                                        if (a.charAt(index + 1) == '=') {
                                                            item = new Lexema(String.format("%s%c", a, texto.charAt(index + 1)), "cLE", "Menor ou Igual", linha, coluna);
                                                            index = index + 2;
                                                        } else {
                                                            if (a.charAt(index + 1) == '>') {
                                                                item = new Lexema(String.format("%s%c", a, texto.charAt(index + 1)), "cNE", "Diferente", linha, coluna);
                                                                index = index + 2;
                                                            } else {
                                                                item = new Lexema(a, "cLT", "Menor", linha, coluna);
                                                                index++;
                                                            }
                                                        }
                                                    } else {
                                                        if (a.equals(">")) {
                                                            if (texto.charAt(index + 1) == '=') {
                                                                item = new Lexema(String.format("%s%c", a, texto.charAt(index + 1)), "cGE", "Maior ou Igual", linha, coluna);
                                                                index = index + 2;
                                                            } else {
                                                                item = new Lexema(a, "cGT", "Maior", linha, coluna);
                                                                index++;
                                                            }
                                                        } else {
                                                            if (a.equals(";")) {
                                                                item = new Lexema(a, "cPVir", "Ponto e Virgula", linha, coluna);
                                                                index++;
                                                            } else {
                                                                if (a.equals(",")) {
                                                                    item = new Lexema(a, "cVir", "Virgula", linha, coluna);
                                                                    index++;
                                                                } else {
                                                                    if (a.equals(".")) {
                                                                        item = new Lexema(a, "cPto", "Ponto", linha, coluna);
                                                                        index++;
                                                                    } else {
                                                                        if(a.equals("[")) {
                                                                            item = new Lexema(a, "cLCol", "Colchete esquerdo",linha, coluna);
                                                                            index++;
                                                                        } else {
                                                                            if(a.equals("]")) {
                                                                                item = new Lexema(a, "cRCol", "Colchete direito", linha, coluna);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                    }
                                }
                            }

                        }
                    }
                }
            }
        }

        return item;
    }

    public Lexema numero() {
        Lexema resultado;
        String c = new String();
        String leitor = String.format("%c", texto.charAt(index));
        System.out.println("ok7");
        do {
            System.out.println("ok8");
            c = leitor.substring(0);
            index++;
            if (index < texto.length()) {
                leitor = String.format("%s%c", leitor, texto.charAt(index));
            }

        } while ((leitor.matches("\\d+") || leitor.matches("\\d+[,][\\d][E e ][|-]?[\\d+]")) && index < texto.length());

        if (c.matches("[\\d]+")) {
            resultado = new Lexema(c, "cInt", "NÃºmero Inteiro", linha, coluna);
        } else {
            resultado = new Lexema(c, "cReal", "NÃºmero Real", linha, coluna);
        }

        return resultado;
    }

    public Lexema identificador() {
        String c = new String();
        Lexema resultado=null;
        String leitor = String.format("%c", texto.charAt(index));
        do {
            c = leitor.substring(0);
            index++;
            if (index < texto.length()) {
                leitor = String.format("%s%c", leitor, texto.charAt(index));
            }

        } while (leitor.matches("[\\w][\\w|\\d]+?") && index < texto.length());
        
        for(String s: this.palavrasReservadas){
            if(s.toLowerCase().equals(c.toLowerCase())){
                resultado = new Lexema(c, "cRes", "Palavra Reservada", linha, coluna);
            }
        }
        if(resultado ==null){
            resultado = new Lexema(c, "cId", "Identificador", linha, coluna);
        }
        

        return resultado;
    }

    public Lexema string() {
        String leitor = String.format("%c", texto.charAt(index));

        do {

            index++;
            leitor = String.format("%s%c", leitor, texto.charAt(index));

        } while (!(String.format("%c", texto.charAt(index)).equals("\'")) && index < texto.length());
        index++;
        Lexema resultado = new Lexema(leitor, "cStr", "String", linha, coluna);
        return resultado;
    }
    
    
    // -------------------ANALISADOR SINTATICO---------------------------------
    
    
    //<programa> ::= program id A01 <corpo> . [A45]
    public void programa(){
    	if(comparaClasseLexema("cRes","program")){
    		lexema = analisadorLexico(texto);
    		if(comparaClasseLexema("cId",lexema.getTexto())){
                lexema.setCategoria("Programa");
                insereTabela();
                A01();
    			lexema = analisadorLexico(texto);
    			corpo();
    			if(comparaClasseLexema("cPto",".")){
                    A45();
    				lexema = analisadorLexico(texto);
    			} else {
    				
    				imprimeErro("cPto", ".");
    			}
    		} else {
    			imprimeErro("cId",lexema.getTexto());
    		}
    	} else {
    		imprimeErro("cRes", "program");
    	}
    }

        
    //<corpo> ::= <declara> <rotina> [A44] <bloco> [A46]
    public void corpo(){
    	declara();
    	rotina();
        A44();
    	bloco();
        A46();
    }

    //<bloco> ::= begin <sentencas> end
    public void bloco(){
        if(comparaClasseLexema("cRes","begin")){
                lexema = analisadorLexico(texto);
                sentencas();
                if(comparaClasseLexema("cRes","end")){
                        lexema = analisadorLexico(texto);
                } else {
                        imprimeErro("cRes","end");
                }
        } else {
                imprimeErro("cRes", "begin");
        }
    }
        
    //<declara> ::= var <dvar> <declara> | vazio
    public void declara(){
    	if(comparaClasseLexema("cRes","var")){
                variaveisLocais++;
    		lexema = analisadorLexico(texto);
    		dvar(false);
    		declara();
    	}
    }
        
        
        
     //<dvar> ::= <variaveis> : <tipo> [A02] ; <dvarL> 
    public void dvar(boolean dvar_controle){
    	if(comparaClasseLexema("cId", lexema.getTexto())){
            variaveis();
            if(dvar_controle){
                if(comparaClasseLexema("cDPto",":")){
                    lexema = analisadorLexico(texto);
                    tipo("Variavel");
                    //A02();
                    if(comparaClasseLexema("cPVir", ";")){
                        lexema = analisadorLexico(texto);
                        dvarL();
                    } else {
                        imprimeErro("cPVir", ";");
                    }
                } else {
                    imprimeErro("cDPto", ":");
                }
            } else {
                if(comparaClasseLexema("cDPto",":")){
                    lexema = analisadorLexico(texto);
                    tipo("Variavel");
                    if(comparaClasseLexema("cPVir", ";")){
                        lexema = analisadorLexico(texto);
                        dvarL();
                    } else {
                        imprimeErro("cPVir", ";");
                    }
                } else {
                    imprimeErro("cDPto", ":");
                }
            }
        }
    }
       
        
    //<dvarL> ::= <tipo_var> [A02] <dvarLL>
    public void dvarL(){
    	//A02();
        dvar(true);
    }
        
        
    ////<dvarLL> ::= ; <dvar> | Ã¯ÂÂ¥
    //public void dvarLL(){
    //	if(comparaClasseLexema("cPVir",";")){
    //        lexema= analisadorLexico(texto);
    //         dvar();
    //        }
    //            
    //}
        
        
    ////<tipo_var> ::= integer | real
    //public void tipo_var(){
    //	if(comparaClasseLexema("cRes","integer") || comparaClasseLexema("cRes","real")){
    //		lexema = analisadorLexico(texto);
    //	} else {
    //		imprimeErro("cNum","Numero (inteiro ou real)");
    //	}
    //}

    //<tipo> ::= <tipo_simples> | array <tipo_array>
    public void tipo(String categoria){
        if(comparaClasseLexema("cRes", "array")){
            lexema = analisadorLexico(texto);
            tipo_array(categoria);
        } else {
            tipo_simples(categoria);
        }
    }

    //<tipo_simples> ::= integer | real
    public void tipo_simples(String categoria){
        if(comparaClasseLexema("cRes", "real") || comparaClasseLexema("cRes", "integer")){
            Lexema aux = lexema;
            for(Lexema l : detTipo){
                l.setTipo(aux.getTexto());
                l.setCategoria(categoria);
                lexema = l;
                insereTabela();
            }
            lexema = analisadorLexico(texto);
            detTipo.clear();
        } else {
            imprimeErro("cRes", "real | integer");
        }
    }

    //<tipo_array> ::= [ <indice> ] of <tipo_simples>
    public void tipo_array(String categoria){
        if(comparaClasseLexema("cLCol", "[")){
            lexema = analisadorLexico(texto);
            indice();
            if(comparaClasseLexema("cRCol", "]")){
                lexema = analisadorLexico(texto);
                if(comparaClasseLexema("cRes", "of")){
                    lexema = analisadorLexico(texto);
                    tipo_simples(categoria);
                } else {
                    imprimeErro("cRes", "of");
                }
            } else {
                imprimeErro("cRCol", "]");
            }
        } else {
            imprimeErro("cLCol", "[");
        }
    }
        
    //<indice> ::= num      -> num = inteiro
    public void indice(){
        if(comparaClasseLexema("cInt", lexema.getTexto())){
            lexema = analisadorLexico(texto);
        } else {
            imprimeErro("cInt", "Numero inteiro");
        }
    }



    //<variaveis> ::= id [A03] <variaveisL>
    public void variaveis(){
    	if(comparaClasseLexema("cId",lexema.getTexto())){
            lexema.setCategoria("Variavel");
            detTipo.add(lexema);
            A03();
            lexema = analisadorLexico(texto);
            variaveisL();
    	} else {
    		imprimeErro("cId", "identificador");
    	}
    }

        
    //<variaveisL> ::= , id [A03] <variaveisL> | vazio
    public void variaveisL(){
    	if(comparaClasseLexema("cVir",",")){
    		lexema = analisadorLexico(texto);
    		if(comparaClasseLexema("cId",lexema.getTexto())){
    			lexema.setCategoria("Variavel");
                detTipo.add(lexema);
                A03();
                lexema = analisadorLexico(texto);
    			variaveisL();
    		} else {
    			imprimeErro("cId", "identificador");
    		}
    	}
    }
        
        
    //<rotina> ::= procedure <procedimento> | function <funcao> | vazio
    public void rotina(){
    	if(comparaClasseLexema("cRes","procedure")){
    		lexema = analisadorLexico(texto);
    		procedimento();
    	} else if(comparaClasseLexema("cRes", "function")){
    		lexema = analisadorLexico(texto);
    		funcao();
    	}
    }
        
        
    //<procedimento> ::= id [A04] <parametros> [A48] ; <corpo> [A56] ; <rotina>
    public void procedimento(){
    	if(comparaClasseLexema("cId",lexema.getTexto())){
            lexema.setCategoria("Procedimento");
            //A04();
    		lexema = analisadorLexico(texto);
    		parametros();
            //A48();
    		if(comparaClasseLexema("cPVir",";")){
    			lexema = analisadorLexico(texto);
    			corpo();
                //A56();
    			if(comparaClasseLexema("cPVir",";")){
    				lexema = analisadorLexico(texto);
    				rotina();
    			} else {
    				imprimeErro("cPVir", ";");
    			}
    		} else {
    			imprimeErro("cPVir", ";");
    		}
    	} else {
    		imprimeErro("cId", "identificador");
    	}
    }

      //<funcao> ::= id [A05] <parametros> [A48] : <tipo_simples> [A47] ; <corpo> [A56] ; <rotina>
    public void funcao(){
    	if(comparaClasseLexema("cId",lexema.getTexto())){
            Lexema aux = lexema;
            //Registro ultimoId = A05();
    		lexema = analisadorLexico(texto);
    		parametros();
            //A48();
            detTipo.add(aux);
    		if(comparaClasseLexema("cDPto",":")){
    			lexema = analisadorLexico(texto);
    			tipo_simples("Funcao");
                //A47(ultimoId);
    			if(comparaClasseLexema("cPVir",";")){
    				lexema = analisadorLexico(texto);
    				corpo();
                    //A56();
    				if(comparaClasseLexema("cPVir",";")){
    					lexema = analisadorLexico(texto);
    					rotina();
    				} else {
    					imprimeErro("cPVir", ";");
    				}
    			} else {
    				imprimeErro("cPVir", ";");
    			}
    		} else {
    			imprimeErro("cPVir", ";");
    		}
    	} else {
    		imprimeErro("cId", "identificador");
    	}
    }
      
        
        
        //<parametros> ::= ( <lista_parametros> ) | Ã¯ÂÂ¥
    public void parametros(){
    	if(comparaClasseLexema("cLPar","(")){
    		lexema = analisadorLexico(texto);
    		lista_parametros();
    		if(comparaClasseLexema("cRPar", ")")){
    			lexema = analisadorLexico(texto);
    		} else {
    			imprimeErro("cRPar",")");
    		}
    	}
    }

        
        
        
        //<lista_parametros> ::= <lista_id> : <tipo> [A06] <lista_paremetrosL>
        public void lista_parametros(){
    	lista_id();
    	if(comparaClasseLexema("cDPto",":")){
    		lexema = analisadorLexico(texto);
    		tipo("Parametro");
            //A06();
    		lista_parametrosL();
    	} else {
    		imprimeErro("cDPto", ":");
    	}
    }

       
    //<lista_parametrosL> ::=  ; <lista_parametros> | vazio
    public void lista_parametrosL(){
    	if(comparaClasseLexema("cPVir", ";")){
    		lexema = analisadorLexico(texto);
    		lista_parametros();
    	}
    }
        
        
    //<lista_id> ::= id [A07] <listaidL>
    public void lista_id(){
    	if(comparaClasseLexema("cId", lexema.getTexto())){
            detTipo.add(lexema);
            //A07();
            lexema = analisadorLexico(texto);
    		lista_idL();
    	} else {
    		imprimeErro("cId","identificador");
    	}
    }
        
        
        
    //<lista_idL> = , id [A07] <lista_idL> | vazio
    public void lista_idL(){
    	if(comparaClasseLexema("cVir",",")){
            detTipo.add(lexema);
    		lexema = analisadorLexico(texto);
    		if(comparaClasseLexema("cId", lexema.getTexto())){
    			//A07();
                lexema = analisadorLexico(texto);
    			lista_idL();
    		} else {
    			imprimeErro("cId", "identificador");
    		}
    	}
    }

        

    //<tipo_funcao> ::= integer | real
    public void tipo_funcao(){
    	if(comparaClasseLexema("cRes", lexema.getTexto())){
    		lexema = analisadorLexico(texto);
    	} else {
    		imprimeErro("cRes", "real ou integer");
    	}
    }


    //<comando> ::= 		read ( <var_read> ) |
    public void comando(){
        Registro registro;
    	if(comparaClasseLexema("cRes", "read")){
    		lexema = analisadorLexico(texto);
    		if(comparaClasseLexema("cLPar", "(")){
    			lexema = analisadorLexico(texto);
    			var_read();
    			if(comparaClasseLexema("cRPar", ")")){
    				lexema = analisadorLexico(texto);
    			} else {
    				imprimeErro("cRPar", ")");
    			}
    		} else {
    			imprimeErro("cLPar", "(");
    		}
    	} else if(comparaClasseLexema("cRes", "write")) {	//					 	write ( <exp_write> ) |
    		lexema = analisadorLexico(texto);
    		if(comparaClasseLexema("cLPar", "(")){
    			lexema = analisadorLexico(texto);
    			exp_write(false);
    			if(comparaClasseLexema("cRPar", ")")){
    				lexema = analisadorLexico(texto);
    			} else {
    				imprimeErro("cRPar", ")");
    			}
    		} else {
    			imprimeErro("cLPar", "(");
    		}
    	}else if(comparaClasseLexema("cRes", "writeln")) {   //                      writeln ( <exp_write> ) |
            lexema = analisadorLexico(texto);
            if(comparaClasseLexema("cLPar", "(")){
                lexema = analisadorLexico(texto);
                exp_write(true);
                if(comparaClasseLexema("cRPar", ")")){
                    lexema = analisadorLexico(texto);
                } else {
                    imprimeErro("cRPar", ")");
                }
            } else {
                imprimeErro("cLPar", "(");
            }
        } else if(comparaClasseLexema("cRes", "for")) {	//				 	 	for id_variavel [A57] := <expressao> [A11] to <expressao> [A12] do <bloco> [A13] ; |
    		lexema = analisadorLexico(texto);
    		if(comparaClasseLexema("cId", lexema.getTexto())){
                if(idInTable("Variavel", lexema.getTexto())){
                    //Registro ultimoID = A57();
                    lexema = analisadorLexico(texto);
                    if(comparaClasseLexema("cAtr",":=")){
                        lexema = analisadorLexico(texto);
                        expressao();
                        //A11(ultimoID);
                        if(comparaClasseLexema("cRes", "to")){
                            lexema = analisadorLexico(texto);
                            expressao();
                            //A12();
                            if(comparaClasseLexema("cRes", "do")){
                                lexema = analisadorLexico(texto);
                                bloco();
                                //A13();
                            } else {
                                imprimeErro("cRes", "do");
                            }
                        } else {
                            imprimeErro("cRes", "to");
                        }
                    } else {
                        imprimeErro("cAtr", ":=");
                    }
                } else {
                    imprimeErro("cId","identificador");
                }
                } else {
                    imprimeErro("cId", "Variavel");
                }
    	} else if(comparaClasseLexema("cRes", "repeat")) {	//				 	 	repeat [A14] <sentencas> until <expressao_logica> [A15] |
    		//A14();
            lexema = analisadorLexico(texto);
    		sentencas();
    		if(comparaClasseLexema("cRes", "until")){
                    lexema = analisadorLexico(texto);
                    expressao_logica();
                    //A15();
    		} else {
    			imprimeErro("cRes", "until");
    		}
    	} else if(comparaClasseLexema("cRes", "while")){	//				while [A16] <expressao_logica> [A17] do <bloco> [A18] |
    		//A16();
            lexema = analisadorLexico(texto);
                expressao_logica();
                //A17();
                if(comparaClasseLexema("cRes", "do")){
                        lexema = analisadorLexico(texto);
                        bloco();
                        //A18();
                } else {
                        imprimeErro("cRes", "do");
                }
    	} else if(comparaClasseLexema("cRes", "if")){	//				if <expressao_logica> [A19] then <bloco> [A20] <pfalsa> [A21]|
    		lexema = analisadorLexico(texto);
                expressao_logica();
                //A19();
                if(comparaClasseLexema("cRes", "then")){
                        lexema = analisadorLexico(texto);
                        bloco();
                        //A20();
                        pfalsa();
                        //A21();
                } else {
                        imprimeErro("cRes", "then");
                }
    	} else if(comparaClasseLexema("cId", lexema.getTexto())){	//	id_variavel [A49] := <expressao> [A22] |
                                                                                                // OK
    		if(idInTable("Variavel", lexema.getTexto()) || idInTable("Funcao", lexema.getTexto())){
                if(idInTable("Variavel", lexema.getTexto())){
                    registro = A49();
                    lexema = analisadorLexico(texto);
                    if(comparaClasseLexema("cAtr", ":=")){
                        lexema = analisadorLexico(texto);
                        registroGlobal = new Registro();
                        registroGlobal.setNome(lexema.getTexto());
                        expressao();
                        A22(registro);
                    }
                } else {                    // id_funcao [A58] := <expressao> [A22] |
                                                                                            // OK
                    //A58();      
                    lexema = analisadorLexico(texto);
                    if(comparaClasseLexema("cAtr", ":=")){
                        lexema = analisadorLexico(texto);
                        expressao();
                    }
                }
                //A22();
               } else if(idInTable("Procedimento", lexema.getTexto())) { //     id_procedimento [A50] <argumentos> [A23]
                    //A50();
                    lexema = analisadorLexico(texto);
                    procedimento2();
               } else {
                    imprimeErro("com", lexema.getTexto());
               }
    	}
    }

    
    
    //	<idL> ::= <argumentos> | := <expressao>

    public void idL(){
    	if(comparaClasseLexema("cAtr", ":=")){
    		lexema = analisadorLexico(texto);
    		expressao();
    	} else {
    		argumentos();
    	}
    }

    
    //<sentencas> ::= <comando> ; <sentencasL>]
    public void sentencas(){
        comando();
        if(comparaClasseLexema("cPVir", ";")){
            lexema = analisadorLexico(texto);
            sentencasL();
        } else {
            imprimeErro("cPVir", ";");
        }
    }

    //<sentencasL> ::= <sentencas> | vazio
    public void sentencasL(){
       if(!comparaClasseLexema("cRes","end")){
           sentencas();
       }
    }

    //<var_read> ::= id_variavel [A08] <var_readL>
    public void var_read(){
       if(comparaClasseLexema("cId", lexema.getTexto())){
           if(idInTable("Variavel", lexema.getTexto())){
                //A08();
                lexema = analisadorLexico(texto);
                var_readL();
           } else {
                imprimeErro("cId", "Variavel");
           }   
       }else{
           imprimeErro("cId", lexema.getTexto());
       }
    }

    //<var_readL> ::= , <var_read> | vazio
    public void var_readL(){
       if(comparaClasseLexema("cVir", ",")){
           lexema = analisadorLexico(texto);
           var_read();
       }
    }

    //<var_write> ::= id_variavel [A09] <var_writeL>
    public void var_write(){
       if(comparaClasseLexema("cId", lexema.getTexto())){
           if(idInTable("Variavel", lexema.getTexto())){
                A09();
                lexema=analisadorLexico(texto);
                var_writeL();
           } else {
                imprimeErro("cId", "VariÃ¡vel");
           }
       }else{
           imprimeErro("cId",lexema.getTexto());
       }
    }

    //<exp_write> ::= string A59 | <var_write>
    public void exp_write(boolean wln){
        if(comparaClasseLexema("cStr", lexema.getTexto())){
            A59(wln);
            lexema = analisadorLexico(texto);
        } else {
            var_write();
        }
    }

    //<var_writeL> ::= , <var_write> | vazio
    public void var_writeL(){
       if(comparaClasseLexema("cVir", ",")){
           lexema=analisadorLexico(texto);
           var_write();
       }
    }

    //<argumentos> ::= ( <lista_arg> ) | ï¥
    public void argumentos(){
       if(comparaClasseLexema("cLPar", "(")){
           lexema=analisadorLexico(texto);
           lista_arg();
           if(comparaClasseLexema("cRPar", ")")){
               lexema = analisadorLexico(texto);
           }
            else{
               imprimeErro("cRPar", ")");
           }
       }
    }

    //<lista_arg> ::= <expressao> <lista_argL>
    public void lista_arg(){
       expressao();
       lista_argL();
    }

    //<lista_argL> ::= , <lista_arg> | vazio
    public void lista_argL(){
       if(comparaClasseLexema("cVir", ",")){
           lexema=analisadorLexico(texto);
           lista_arg();
       }
    }


    /*public void condicao(){
       expressao();
       relacao();
       expressao();
    }*/

    //<pfalsa> ::= else [A25] <bloco> | ï¥
    public void pfalsa(){
       if(comparaClasseLexema("cRes", "else")){
            //A25();
            lexema = analisadorLexico(texto);
            bloco();
      }
    }

    //<expressao_logica> ::= <termo_logico> [A26] <expressao_logicaL>
    public void expressao_logica(){
        termo_logico();
        //A26();
        expressao_logicaL();
    }

    //<expressao_logicaL> ::= or <termo_logico> <expressao_logicaL> | vazio
    public void expressao_logicaL(){
        if(comparaClasseLexema("cRes", "or")){
            lexema = analisadorLexico(texto);
            termo_logico();
            expressao_logicaL();
        }
    }

    //<termo_logico> ::= <fator_logico> [A27] <termo_logicoL>
    public void termo_logico(){
        fator_logico();
        //A27();
        termo_logicoL();
    }

    //<termo_logicoL> ::= and <fator_logico> [A27] <termo_logicoL> | vazio
    public void termo_logicoL(){
        if(comparaClasseLexema("cRes", "and")){
            lexema = analisadorLexico(texto);
            fator_logico();
            //A27();
            termo_logicoL();
        }
    }

    //<fator_logico> ::= <relacional> | ( <expressao_logica> ) | not <fator_logico> [A28] | true [A29] | false [A30]
    public void fator_logico(){
        if(comparaClasseLexema("cLPar", "(")){
            lexema = analisadorLexico(texto);
            expressao_logica();
            if(comparaClasseLexema("cRPar", ")")){
                lexema = analisadorLexico(texto);
            }
        } else if(comparaClasseLexema("cRes", "not")){
            lexema = analisadorLexico(texto);
            fator_logico();
            //A28();
        } else if(comparaClasseLexema("cRes", "true")){
            //A29();
            lexema = analisadorLexico(texto);
        } else if(comparaClasseLexema("cRes", "false")){
            //A30();
            lexema = analisadorLexico(texto);
        } else {
            relacional();
        }
    }

    //                      <relacional> ::= <expressao> = <expressao> [A31] | 
    //                      <relacional> ::= <expressao> > <expressao> [A32] | 
    //                      <relacional> ::= <expressao> >= <expressao> [A33] | 
    //                      <relacional> ::= <expressao> < <expressao> [A34] | 
    //                      <relacional> ::= <expressao> <= <expressao> [A35] | 
    //                      <relacional> ::= <expressao> <> <expressao> [A36] |     

                                                                            // OK
    public void relacional(){
        expressao();
        int opt=0;
        if(comparaClasseLexema("cEQ", "=")){
           opt = 1;
           lexema=analisadorLexico(texto);
       }else{
           if(comparaClasseLexema("cGT", ">")){
                opt = 2;
               lexema=analisadorLexico(texto);
           }else{
               if(comparaClasseLexema("cLT", "<")){
                    opt = 4;
                   lexema = analisadorLexico(texto);
                  
               }else{
                   if(comparaClasseLexema("cGE", ">=")){
                        opt = 3;
                       lexema=analisadorLexico(texto);
                   }else{
                       if(comparaClasseLexema("cLE", "<=")){
                            opt = 5;
                           lexema=analisadorLexico(texto);
                       }else{
                           if(comparaClasseLexema("cNE", "<>")){
                                opt = 6;
                               lexema=analisadorLexico(texto);
                           }else{
                               imprimeErro("cEQ | cGT | cLT | cGE | cLE | cNE", "= | > | < | >= | <= | <>");
                           }
                       }
                   }
               }
           }
       }
        expressao();
        switch(opt){
            case 1:
                //A31();
                break;

            case 2:
                //A32();
                break;

            case 3:
                //A33();
                break;

                
            case 4:
                //A34();
                break;

            case 5:
                //A35();
                break;

            case 6:
                //A36();
                break;
                
       }
    }

    //<expressao> ::= <termo> <expressaoL>
    public void expressao(){
        termo();
        expressaoL();
    }
   
    //<expressaoL> ::= + <termo> [A37] <expressaoL> | - <termo> [A38] <expressaoL> | vazio
                                                                                                    //OK
    public void expressaoL(){
        int opt = 0;
       if(comparaClasseLexema("cAdd", "+") || comparaClasseLexema("cSub", "-")){
           if(comparaClasseLexema("cAdd","+")){
                opt = 1;
           } else {
            opt = 2;
           }
           lexema = analisadorLexico(texto);
           registroGlobal = new Registro();
           registroGlobal.setNome(lexema.getTexto());
           termo();
           switch(opt){
                case 1:
                    A37();
                    break;

                case 2:
                    A38();
                    break;
           }
           expressaoL();
       }   
    }
   
    //<termo> ::= <fator> <termoL>
    public void termo(){
        fator();
        termoL();
    }
   
    //<termoL> ::= * <fator> [A39] <termoL> | / <fator> [A40] <termoL> | vazio
                                                                                //OK
    public void termoL(){
        int opt = 0;
       if(comparaClasseLexema("cMul", "*") || comparaClasseLexema("cDiv", "/")){
            if(comparaClasseLexema("cMul", "*")){
                opt = 1;
            } else {
                opt = 2;
            }
            lexema = analisadorLexico(texto);
            registroGlobal = new Registro();
            registroGlobal.setNome(lexema.getTexto());
            fator();
            switch(opt){
                case 1:
                    A39();
                    break;

                case 2:
                    A40();
                    break;
            }
            termoL();
       }
    }

   //<fator> ::= <variavel> [A55] | <funcao> | num [A41] | ( <expressao> )
    public void fator(){
        if(comparaClasseLexema("cId", lexema.getTexto())){
            if(idInTable("Variavel", lexema.getTexto()) || idInTable("Variavel array", lexema.getTexto())){
                variavel();
                A55();
            } else if(idInTable("Funcao", lexema.getTexto())){
                funcao2();
            } else {
                imprimeErro("cId", "Variavel | Variavel array | Funcao");
            }
        }else{
            if(comparaClasseLexema("cInt", lexema.getTexto()) || comparaClasseLexema("cReal", lexema.getTexto())){
                A41();
                lexema = analisadorLexico(texto);
            }else{
                if(comparaClasseLexema("cLPar", "(")){
                    lexema=analisadorLexico(texto);
                    expressao();
                    if(comparaClasseLexema("cRpar", ")")){
                        lexema=analisadorLexico(texto);
                    }else{
                        imprimeErro("cRpar", ")");
                    }
                }else{
                    imprimeErro("cLPar | cInt | cId", "( | Numero | Identificador");
                }
            }
        }
    }

    //<funcao2> ::= id_funcao <argumentos> [A42]
    public void funcao2(){
        lexema = analisadorLexico(texto);
        argumentos();
        //A42();
    }

    //<procedimento2> ::= id_procedimento <argumentos> A23();
    public void procedimento2(){
        lexema = analisadorLexico(texto);
        argumentos();
        //A23();
    }

    // <variavel> ::= id_variavel_simples | id_variavel_array [ <expressao> ]
    public void variavel(){         
        if(comparaClasseLexema("cId", lexema.getTexto())){
            if(!idInTable("Variavel",lexema.getTexto())){
                if(idInTable("Variavel array", lexema.getTexto())){
                    lexema = analisadorLexico(texto);
                    if(comparaClasseLexema("cLCol", "[")){
                        lexema = analisadorLexico(texto);
                        expressao();
                        if(comparaClasseLexema("cRCol", "]")){
                            lexema = analisadorLexico(texto);
                        } else {
                            imprimeErro("cRCol", "]");
                        }
                    } else {
                        imprimeErro("cLCol", "[");
                    }
                } else {
                    imprimeErro("cId", "Variavel");
                }
            } else {
                lexema = analisadorLexico(texto);
            }
        } else {
            imprimeErro("cRes", "Identificador");
        }
    }
   
   
    public void fatorL(){
        argumentos();
    }

    
   
    public boolean comparaClasseLexema(String classe, String texto){
	boolean v = false;
	if(lexema.getClasse().equals(classe) && lexema.getTexto().equals(texto))
		v = true;
	return v;
    }

    public void imprimeErro(String classe, String description){
        erro = true;
        textAreaMensagens.setText(textAreaMensagens.getText().toString()+"Na linha "+ (lexema.getLinha()+1)+" :\n");
        if(classe.equals("com")){
            errorDescription = String.format("Comando '%s' nÃ£o reconhecido", description);
        } else{
            if(classe.matches("cRes\\w*")){
                errorDescription = String.format("Palavra reservada %s esperado.\n", description);
            } else {
                errorDescription = String.format("'%s' esperado.\n", description);
                }
            }
       
        
        textAreaMensagens.setText(textAreaMensagens.getText().toString()+errorDescription + " \n " + lexema.getTexto()+"\n");
        
    
    }
    
    public void insereTabela(){ //inserir lexema em uma tabela de simbolos
        
        int soma=0;
        for(int i=0;i<lexema.getTexto().length();i++){
            soma = soma+lexema.getTexto().charAt(i);
        }
        int hash = soma%17;
        ItemTabela novoItem = new ItemTabela(lexema,null,null,hash);
        if(table[hash]==null){
            table[hash]=novoItem;
        }else{
            novoItem.insereProximo(table[hash], novoItem);
        }
        
    }

    public boolean idInTable(String categoria, String textoLexema){      // verificar se existe um id na tabela de simbolos com o texto e a categoria
        boolean test = false;
        int soma=0;
        for(int i=0;i<textoLexema.length();i++){
            soma = soma+textoLexema.charAt(i);
        }
        int hash = soma%17;
        if(table[hash]!=null){
            test= table[hash].existe(table[hash],textoLexema, categoria);
        }
        return test;
    }
    
    public void imprimeTabela(){
        DefaultTableModel model = new DefaultTableModel();
        jTableTabelaDeSimbolos.setModel(model);
        model.addColumn("Lexema");
        model.addColumn("Categoria");
        model.addColumn("Tipo");
        
        ItemTabela item=null;
        
        for(int i=0; i<17;i++){
            if(table[i]!=null){
                table[i].imprimeItensTabela(table[i], model);
            }
           
        }
    }
    
    // AÃ§Ãµes ------------------------------------------------------------------------------------------
  
    
    public void A01(){
	tabelaSimbolos = new TabelaSimbolos();
	tabelaSimbolos.setTabelaPai(null);
        tabelaSimbolos.setRotulo("_main");
	Registro registro = new Registro();
	registro.setNome(lexema.getTexto());
	nivel = 0;
	registro.setNivel(nivel);
	registro.setCategoria("Programa principal");
	
	offsetVariavel.add(0);
	registro.setOffset(offsetVariavel.get(nivel));
	tabelaSimbolos.addRegistro(registro);
	insereLinhaArquivo("global _main");
	insereLinhaArquivo("extern _printf");
	insereLinhaArquivo("extern _putchar");
	insereLinhaArquivo("extern _scanf");
	insereLinhaArquivo("section .text");
}
    
    
    
    public void A03(){
	Registro registro = new Registro();
	registro.setNome(lexema.getTexto());
	if(!tabelaSimbolos.temRegistro(registro)){
		registro.setCategoria("Variavel");
                offsetVariavel.set(nivel, offsetVariavel.get(nivel)+4); //SIZEOF_INT
		registro.setNivel(nivel);
		registro.setOffset(offsetVariavel.get(nivel));
                tabelaSimbolos.addRegistro(registro);
	} else {
		//Erro: identificador jÃ¡ declarado anteriormente
	}
}
    /*
    
    public void A04(){
        TabelaSimbolos procura = procuraId(this.tabelaSimbolos);
        if(procura== null){
            this.nivel = nivel+1;
            Registro novo = new Registro();
            novo.setNivel(this.nivel);
            novo.setNome(this.lexema.getTexto());
            novo.setCategoria("Procedimento");
            novo.setRotulo(lexema.getTexto());
            
            TabelaSimbolos novoProcedimentoTS = new TabelaSimbolos(); 
            novoProcedimentoTS.setTabelaPai(tabelaSimbolos);
            
            novo.setTabelaSimbolos(novoProcedimentoTS);
            tabelaSimbolos.addRegistro(novo);
            tabelaSimbolos = novoProcedimentoTS;
            
            offsetVariavel.add(0);
           
        
        }else{
            // emitir uma mensagem apropriada dizendo que o mesmo jÃ¡ foi declarado anteriormente.
        }
    }
    
    public TabelaSimbolos procuraId(TabelaSimbolos tabelaPai){
        TabelaSimbolos resultado = new TabelaSimbolos();
        boolean encontrou = false;
        if(tabelaPai== null){
           resultado = tabelaPai;
        }else{
            for(Registro r: tabelaPai.getRegistros()){
                if(r.getNome().equals(lexema.getTexto())){
                    resultado = tabelaPai;
                    encontrou = true;
                }  
            }
            if (!encontrou){
                resultado = procuraId(tabelaPai.getTabelaPai());
            }
        }
        return resultado;
    }
    
    
    public Registro A05(){
	Registro registro = new Registro();
	registro.setNome(lexema.getTexto());
	if(!tabelaSimbolos.temRegistroTodasTabelas(registro)){
		nivel += 1;
		registro.setNivel(nivel);
		registro.setCategoria("Funcao");
		registro.setRotulo(lexema.getTexto());
		tabelaSimbolos.addRegistro(registro);
		TabelaSimbolos novaTs = new TabelaSimbolos();
		novaTs.setTabelaPai(tabelaSimbolos);
		tabelaSimbolos = novaTs;						// Por este motivo, add na acao 56:  tabelaSimbolos = tabelaSimbolos.getTabelaPai();

		//Inserir o identificador da funÃ§Ã£o, com todas as suas informaÃ§Ãµes, na nova tabela, para que ela possa ser localizada pela atrubuiÃ§Ã£o em <comando>.-----??

		offsetVariavel.add(0);
	} else {
		//Erro: identificador jÃ¡ declarado anteriormente
		return null;
	}
	return registro;
}
    
    
    public void A07(){
	Registro registro = new Registro();
	registro.setNome(lexema.getTexto());
	if(!tabelaSimbolos.temRegistro(registro)){
		registro.setCategoria("Parametro");
		registro.setNivel(nivel);
		tabelaSimbolos.addRegistro(registro);
	} else {
		//Erro: identificador jÃ¡ declarado anteriormente
	}
}
    
    public void A08(){
        TabelaSimbolos procura = procuraId(tabelaSimbolos);
        Registro registro=null;
        if(procura==null){
            //emitir uma mensagem apropriada dizendo que o mesmo ainda nÃ£o foi declarado.
        }else{
            for(Registro r: procura.getRegistros()){
                registro = r;
            }
            if(registro.getCategoria().equals("Variavel") || registro.getCategoria().equals("Parametro")){
                //gerar funcÃ§Ã£o de leitura
            }else{
                // ERRO nÃ£o Ã© variavel nem parametro
            }
        }
    }
*/
    
    public void A09(){
	Registro registro = new Registro();
	registro.setNome(lexema.getTexto());
	if(tabelaSimbolos.temRegistroTodasTabelas(registro)){
		registro = tabelaSimbolos.getEsseRegistro(registro);
		if(registro.getCategoria().equals("Variavel") || registro.getCategoria().equals("Parametro")){
			String basePilha = "ebp";
			if(registro.getNivel() != nivel){
				insereLinhaArquivo(String.format("	mov ebx, dword [@DSP + %d]", 4*registro.getNivel()));
				basePilha = "ebx";
			}
			insereLinhaArquivo(String.format("	push dword [%s - %d]", basePilha, registro.getOffset()));
			insereLinhaArquivo(String.format("	push dword @INTEGER"));
			insereLinhaArquivo("	call _printf");
			insereLinhaArquivo(String.format("	add esp, 8"));
		} else {
			//Erro: identificador nÃ£o Ã© uma VariÃ¡vel
		}
	} else {
		//Erro: identificador nÃ£o foi declarado anteriormente
	}
}
    /*
    
    public void A11(Registro ultimoId){
	if(ultimoId != null){
		String basePilha = "ebp";
		if(ultimoId.getNivel()!=nivel){
			insereLinhaArquivo(String.format("	mov ebx, dword [@DSP + %d]", ultimoId.getNivel()*4));
			basePilha = "ebx";
		}
		insereLinhaArquivo(String.format("	pop dword [%s - %d]", basePilha, ultimoId.getOffset()));

		// gerar rotulo _for
	}
}
    
    public void A12(Registro ultimoId){
        insereLinhaArquivo(String.format("mov ebx, dword [@DSP + %d]", ultimoId.getNivel()*4));
        insereLinhaArquivo("cmp esp ebx");
        insereLinhaArquivo("jg _rotuloFim"); // usar rotulo gerado no gerador de rÃ³tulos;            
    }
      
    
    public void A13(Registro ultimoId){
	if(ultimoId!=null){
		String basePilha = "ebp";
		if(ultimoId.getNivel()!=nivel){
			insereLinhaArquivo(String.format("	mov ebx, dword [@DSP + %d]", ultimoId.getNivel()*4));
			basePilha = "ebx";
		}
		insereLinhaArquivo(String.format(" add dword [%s - %d], 1", basePilha, ultimoId.getOffset()));
		// jmp rotulo _for

		// gerar rotulo _fim_for
	}
}
    
    public void A14(){
        //criar rotulor de repetiÃ§Ã£o do for
        
    }
    
    public void A15(){
	insereLinhaArquivo(String.format(" pop eax"));
	insereLinhaArquivo(String.format(" cmp eax, 1"));
	
	// jne rotulo _repeat
}
    
    public void A16(){
        //criar rotulo entrada while
        //criar rotulo saida while
        insereLinhaArquivo("_while"); // para label while criada acima para entrada
    }
    
    
    public void A17(){
	insereLinhaArquivo(String.format(" pop eax"));
	insereLinhaArquivo(String.format(" cmp eax, 1"));
	
	// jne rotulo _fim_while
}
    
    public void A18(){
        insereLinhaArquivo("jmp _while");//rotulo gerado em a16
        insereLinhaArquivo("_fimWhile");//rotulo gerado em a16
    }
    
    public void A19(){
	// ???????????
}
    public void A20(){
        insereLinhaArquivo("jmp _fimWhile"); // rotulo gerado em a16
    }
    
    public void A21() {
	// gerar rotulo _fim_if
}
*/
    public void A22(Registro registro){
        if(registro.getCategoria().equals("Variavel")){   
            insereLinhaArquivo(String.format("mov eax, dword[@DSP+%d]",registro.getNivel()));
            insereLinhaArquivo("pop ebx");
            insereLinhaArquivo(String.format("mov dword[eax - %d], ebx",registro.getOffset()));
            //Falta implementar caso seja uma funÃ§Ã£o
        }
    }
    
/*    
    
    public void A23(Registro ultimoId){
	if(/*Verificar se o nÃºmero de argumentos fornecido em <argumentos> 
		Ã© igual ao nÃºmero a numeroElementos, do id reconhecido.*\){
		insereLinhaArquivo(String.format("	call %s", ultimoId.getRotulo()));
		insereLinhaArquivo(String.format("	add esp, %d", ultimoId.getNumeroParametros()*4));
	} else {
		// Erro numero argumentos
	}
}
    
    public void A25(){
	// gerar rotulo _else
}
    
    public void A27(){
	String rotuloFalse = ""; // Criar rotulo _false
	String rotuloFim = ""; //Criar rotulo _fim
	insereLinhaArquivo(String.format("	cmp dword [esp + 4], 0"));
	insereLinhaArquivo(String.format("	je %s", rotuloFalse));	// je rotulo _false
	insereLinhaArquivo(String.format("	cmp dword [esp], 0"));
	insereLinhaArquivo(String.format("	je %s", rotuloFalse));	//	je rotulo _false
	insereLinhaArquivo(String.format("	mov dword [esp + 4], 1"));
	insereLinhaArquivo(String.format("	jmp %s", rotuloFim));	// jmp rotulo _fim
	insereLinhaArquivo(String.format("%s", rotuloFalse));	// gerar rotulo _false
	insereLinhaArquivo(String.format("	mov dword [esp + 4], 0"));
	insereLinhaArquivo(String.format("%s", rotuloFim));		// gerar rotulo _fim
	insereLinhaArquivo(String.format("	add esp, 4"));
}
    
    public void A29(){
	insereLinhaArquivo(String.format("	push 1"));
}
    
    public void A31(){
	String rotuloFim = ""; // criar rotulo _fim
	String rotuloFalse = ""; // criar rotulo _false
	insereLinhaArquivo(String.format("	pop eax"));
	insereLinhaArquivo(String.format("	cmp dword [esp], eax"));
	insereLinhaArquivo(String.format("	jne %s", rotuloFalse));
	insereLinhaArquivo(String.format("	mov dword [esp], 1"));
	insereLinhaArquivo(String.format("%s", rotuloFalse));	// gerar rotulo _false
	insereLinhaArquivo(String.format("	mov dword [esp], 0"));
	insereLinhaArquivo(String.format("%s", rotuloFim));	// gerar rotulo _fim
}
    
    public void A32(){
	String rotuloFim = ""; // criar rotulo _fim
	String rotuloFalse = ""; // criar rotulo _false
	insereLinhaArquivo(String.format("	pop eax"));
	insereLinhaArquivo(String.format("	cmp dword [esp], eax"));
	insereLinhaArquivo(String.format("	jle %s", rotuloFalse));
	insereLinhaArquivo(String.format("	mov dword [esp], 1"));
	insereLinhaArquivo(String.format("%s", rotuloFalse));	// gerar rotulo _false
	insereLinhaArquivo(String.format("	mov dword [esp], 0"));
	insereLinhaArquivo(String.format("%s", rotuloFim));	// gerar rotulo _fim
}
    
    public void A33(){
	String rotuloFim = ""; // criar rotulo _fim
	String rotuloFalse = ""; // criar rotulo _false
	insereLinhaArquivo(String.format("	pop eax"));
	insereLinhaArquivo(String.format("	cmp dword [esp], eax"));
	insereLinhaArquivo(String.format("	jl %s", rotuloFalse));
	insereLinhaArquivo(String.format("	mov dword [esp], 1"));
	insereLinhaArquivo(String.format("%s", rotuloFalse));	// gerar rotulo _false
	insereLinhaArquivo(String.format("	mov dword [esp], 0"));
	insereLinhaArquivo(String.format("%s", rotuloFim));	// gerar rotulo _fim
}
    
    public void A34(){
	String rotuloFim = ""; // criar rotulo _fim
	String rotuloFalse = ""; // criar rotulo _false
	insereLinhaArquivo(String.format("	pop eax"));
	insereLinhaArquivo(String.format("	cmp dword [esp], eax"));
	insereLinhaArquivo(String.format("	jge %s", rotuloFalse));
	insereLinhaArquivo(String.format("	mov dword [esp], 1"));
	insereLinhaArquivo(String.format("%s", rotuloFalse));	// gerar rotulo _false
	insereLinhaArquivo(String.format("	mov dword [esp], 0"));
	insereLinhaArquivo(String.format("%s", rotuloFim));	// gerar rotulo _fim
}
    
    public void A35(){
	String rotuloFim = ""; // criar rotulo _fim
	String rotuloFalse = ""; // criar rotulo _false
	insereLinhaArquivo(String.format("	pop eax"));
	insereLinhaArquivo(String.format("	cmp dword [esp], eax"));
	insereLinhaArquivo(String.format("	jg %s", rotuloFalse));
	insereLinhaArquivo(String.format("	mov dword [esp], 1"));
	insereLinhaArquivo(String.format("%s", rotuloFalse));	// gerar rotulo _false
	insereLinhaArquivo(String.format("	mov dword [esp], 0"));
	insereLinhaArquivo(String.format("%s", rotuloFim));	// gerar rotulo _fim
}
    
    */
    
  public void A37(){
	insereLinhaArquivo("	pop eax");
	insereLinhaArquivo("	add dword [esp], eax");
    }
  
  public void A38(){
	insereLinhaArquivo("	pop eax");
	insereLinhaArquivo("	sub dword [esp], eax");
    }
     
  public void A39(){
	insereLinhaArquivo("	pop eax");
	insereLinhaArquivo("	imul eax, dword [esp]");
        insereLinhaArquivo("	mov dword [esp], eax");
    }
  
  public void A40(){
	insereLinhaArquivo("	pop ecx");
        insereLinhaArquivo("	pop eax");
        insereLinhaArquivo("    mov edx,0");
	insereLinhaArquivo("	idiv ecx");
        insereLinhaArquivo("	push eax");
    }
   
    public void A41(){
	insereLinhaArquivo(String.format("	push %d", Integer.parseInt(lexema.getTexto())));
}
    
    public void A44(){
        String rotulo= new String();
        rotulo = tabelaSimbolos.getRotulo();
        insereLinhaArquivo(String.format("%s:",rotulo));
        insereLinhaArquivo("push ebp");
        insereLinhaArquivo(String.format("push dword[@DSP + %d]", nivel*4));
        insereLinhaArquivo("mov ebp,esp");
        insereLinhaArquivo(String.format("mov dword[@DSP +%d],ebp", nivel*4));
        
        int nVariaveis =0;
        for(Registro r: tabelaSimbolos.getRegistros()){
            if(r.getCategoria().equals("Variavel")){
                nVariaveis++;
            }
        }
        insereLinhaArquivo(String.format("sub esp,%d", nVariaveis*4));
        
    }
        


    
    public void A45(){
	insereLinhaArquivo("section .data");
	insereLinhaArquivo(String.format("@DSP times %d db 0", (nivel+1)*4));
        insereLinhaArquivo("@INTEGER: db '%d' , 0");
        
        for(String s: rotulosData){
            insereLinhaArquivo(s);
        }
}
    
    
    public void A46(){
        
        //verifica quantidade de variaveis locais
        int variaveis =0;
        for(Registro r: tabelaSimbolos.getRegistros()){
            if(r.getNivel()==nivel && r.getCategoria().equals("Variavel")){
                variaveis++;
            }
        }
        
        insereLinhaArquivo(String.format("add esp, %d", variaveis*4));
        insereLinhaArquivo("mov esp,ebp");
        insereLinhaArquivo("pop dword[@DSP+8]");
        insereLinhaArquivo("pop ebp");
        insereLinhaArquivo("ret");
    }
    
    
    /*
    public void A47(Registro ultimoId){
	ultimoId.setNumeroParametros(tabelaSimbolos.getNumeroRegistroParametro());
}
    
    
*/
    public Registro A49(){
	Registro registro = new Registro();
	registro.setNome(lexema.getTexto());
	if(tabelaSimbolos.temRegistroTodasTabelas(registro)){
		registro = tabelaSimbolos.getEsseRegistro(registro);
		String categoria = registro.getCategoria();
		if(categoria==null || (!categoria.equals("Variavel") && !categoria.equals("Parametro"))){
			//Erro id nao e variavel/ parametro
		}
	} else {
		registro = null;//Erro variavel ainda nao declarada
	}
        return registro;
}
  
    
    
    public void A55(){
	Registro registro = registroGlobal;
	if(tabelaSimbolos.temRegistroTodasTabelas(registro)){
		registro = tabelaSimbolos.getEsseRegistro(registro);
		String categoria = registro.getCategoria();
		if(categoria!=null && (categoria.equals("Variavel") || categoria.equals("Parametro"))){
			String basePilha = "ebp";
			if(registro.getNivel()!=nivel){
				insereLinhaArquivo(String.format("	mov ebx, dword [@DSP + %d]", registro.getNivel()*4));
				basePilha = "ebx";
			}
			insereLinhaArquivo(String.format("	push dword [%s - %d]", basePilha, registro.getOffset()));
		}
	} else {
		//Erro variavel nao declarada
	}
}
    /*
    
    public Registro A57(){
	Registro registro = new Registro();
	registro.setNome(lexema.getTexto());
	if(tabelaSimbolos.temRegistroTodasTabelas(registro)){
		registro = tabelaSimbolos.getEsseRegistro();
		if(!registro.getCategoria().equals("Variavel") && !registro.getCategoria().equals("Parametro") && !registro.getCategoria().equals("Funcao")){
			// Erro identificador nÃ£o Ã© uma variavel
			return null;
		}
	} else {
		//Erro variavel nao declarada
		return null;
	}
	return registro;
}
*/

    public void A59(boolean wln){
	String rotuloString = geradorRotulo();	//criar rotulo _string
	String endString = ", 0";
	if(wln)
		endString = ", 10, 0";
	rotulosData.add(String.format("%s db %s %s", rotuloString, lexema.getTexto(), endString));
	insereLinhaArquivo(String.format("	push %s", rotuloString));
	insereLinhaArquivo("	call _printf");
	insereLinhaArquivo("	add esp, 4");
}
 
    
    public String geradorRotulo(){
        contadorRotulos++;
        return String.format("@string%d",contadorRotulos); 
    }

        public void insereLinhaArquivo(String linha){
            codigoAssembly = codigoAssembly+linha+"\n";
        }
 
    
    public File geraArquivoAsm(){
        File file = new File("./programa.asm");
        try{
            file.createNewFile();
            FileWriter asm = new FileWriter(file);
            asm.write(codigoAssembly); // colocar a string do assembly aqui
            asm.flush();
            asm.close();
        }catch(Exception ex){
        }
        
        return file;
    }

    public void rodaAsm(){
        try{
            String caminho = geraArquivoAsm().getAbsolutePath();
            System.out.print(caminho);
            Runtime.getRuntime().exec("nasm -f win32 ./programa.asm -o ./programa.o");
            Runtime.getRuntime().exec("gcc ./programa.o -o ./programa.exe");
            
            String commando = "cmd /c start cmd.exe /K \"programa\"";
            Runtime.getRuntime().exec(commando);
            
            
        }catch(Exception ex){
            System.out.println(ex);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler filler2;
    private javax.swing.JButton jButtonAbrir;
    private javax.swing.JButton jButtonCompilar;
    private javax.swing.JButton jButtonExecutar;
    private javax.swing.JButton jButtonNovo;
    private javax.swing.JButton jButtonSair;
    private javax.swing.JButton jButtonSalvar;
    private javax.swing.JMenu jMenuArquivo;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemAbrir;
    private javax.swing.JMenuItem jMenuItemCompilar;
    private javax.swing.JMenuItem jMenuItemExecutar;
    private javax.swing.JMenuItem jMenuItemFechar;
    private javax.swing.JMenuItem jMenuItemNovo;
    private javax.swing.JMenuItem jMenuItemSair;
    private javax.swing.JMenuItem jMenuItemSalvar;
    private javax.swing.JMenuItem jMenuItemSalvarComo;
    private javax.swing.JMenu jMenuProjeto;
    private javax.swing.JMenu jMenuSobre;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPanePainel;
    private javax.swing.JTable jTableTabelaDeSimbolos;
    private javax.swing.JTextArea jTextAreaItensLexicos;
    private java.awt.Label label1;
    private java.awt.TextArea textAreaAssembly;
    private java.awt.TextArea textAreaMensagens;
    // End of variables declaration//GEN-END:variables
}

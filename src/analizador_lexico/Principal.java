/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package analizador_lexico;

import java.util.ArrayList;

/**
 *
 * @author framc
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
    }

    int linha = 0;
    int coluna = 0;
    int index = 0;
    int lastLine = 0;
    String texto;
    Lexema lexema;
    Boolean erro;
    String errorDescription;
    private ArrayList<String> palavrasReservadas = new ArrayList<>();
    private ArrayList<Lexema> detTipo = new ArrayList<>();
    
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonNovo = new javax.swing.JButton();
        jButtonAbrir = new javax.swing.JButton();
        jButtonSalvar = new javax.swing.JButton();
        jButtonCompilar = new javax.swing.JButton();
        jButtonExecutar = new javax.swing.JButton();
        jButtonSair = new javax.swing.JButton();
        jTabbedPanePainel = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPaneFonte = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableTabelaDeSimbolos = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextAreaItensLexicos = new javax.swing.JTextArea();
        jTabbedPaneMepa = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuArquivo = new javax.swing.JMenu();
        jMenuItemNovo = new javax.swing.JMenuItem();
        jMenuItemAbrir = new javax.swing.JMenuItem();
        jMenuItemFechar = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemSalvar = new javax.swing.JMenuItem();
        jMenuItemSalvarComo = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItemSair = new javax.swing.JMenuItem();
        jMenuProjeto = new javax.swing.JMenu();
        jMenuItemCompilar = new javax.swing.JMenuItem();
        jMenuItemExecutar = new javax.swing.JMenuItem();
        jMenuSobre = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonNovo.setText("Novo");
        jButtonNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNovoActionPerformed(evt);
            }
        });

        jButtonAbrir.setText("Abrir");

        jButtonSalvar.setText("Salvar");

        jButtonCompilar.setText("Compilar");
        jButtonCompilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCompilarActionPerformed(evt);
            }
        });

        jButtonExecutar.setText("Executar");
        jButtonExecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExecutarActionPerformed(evt);
            }
        });

        jButtonSair.setText("Sair");

        jScrollPane1.setViewportView(jTextPaneFonte);

        jTabbedPanePainel.addTab("Fonte", jScrollPane1);

        jTableTabelaDeSimbolos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTableTabelaDeSimbolos);

        jTabbedPanePainel.addTab("Tabela de Simbolos", jScrollPane2);

        jTextAreaItensLexicos.setColumns(20);
        jTextAreaItensLexicos.setRows(5);
        jScrollPane3.setViewportView(jTextAreaItensLexicos);

        jTabbedPanePainel.addTab("Iten LÃ©xicos", jScrollPane3);
        jTabbedPanePainel.addTab("Mepa", jTabbedPaneMepa);

        jMenuArquivo.setText("Arquivo");

        jMenuItemNovo.setText("Novo");
        jMenuArquivo.add(jMenuItemNovo);

        jMenuItemAbrir.setText("Abrir");
        jMenuArquivo.add(jMenuItemAbrir);

        jMenuItemFechar.setText("Fechar");
        jMenuArquivo.add(jMenuItemFechar);
        jMenuArquivo.add(jSeparator1);

        jMenuItemSalvar.setText("Salvar");
        jMenuArquivo.add(jMenuItemSalvar);

        jMenuItemSalvarComo.setText("Salvar como");
        jMenuArquivo.add(jMenuItemSalvarComo);
        jMenuArquivo.add(jSeparator2);

        jMenuItemSair.setText("Sair");
        jMenuArquivo.add(jMenuItemSair);

        jMenuBar1.add(jMenuArquivo);

        jMenuProjeto.setText("Projeto");

        jMenuItemCompilar.setText("Compilar");
        jMenuProjeto.add(jMenuItemCompilar);

        jMenuItemExecutar.setText("Executar");
        jMenuProjeto.add(jMenuItemExecutar);

        jMenuBar1.add(jMenuProjeto);

        jMenuSobre.setText("Sobre");
        jMenuBar1.add(jMenuSobre);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButtonNovo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonAbrir)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonSalvar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonCompilar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonExecutar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonSair)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jTabbedPanePainel, javax.swing.GroupLayout.DEFAULT_SIZE, 608, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonNovo)
                    .addComponent(jButtonAbrir)
                    .addComponent(jButtonSalvar)
                    .addComponent(jButtonCompilar)
                    .addComponent(jButtonExecutar)
                    .addComponent(jButtonSair))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPanePainel, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonExecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExecutarActionPerformed

    }//GEN-LAST:event_jButtonExecutarActionPerformed

    private void jButtonCompilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCompilarActionPerformed
        texto = jTextPaneFonte.getText().toString();
        lexema = analisadorLexico(texto);
        programa();
        index = 0;
        linha = 0;
        coluna = 0;
        

    }//GEN-LAST:event_jButtonCompilarActionPerformed

    private void jButtonNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNovoActionPerformed
        jTextPaneFonte.setText("");
        jTextAreaItensLexicos.setText("");
    }//GEN-LAST:event_jButtonNovoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Principal p = new Principal();
                p.setVisible(true);
                p.palavrasReservadas.add("program");
                p.palavrasReservadas.add("begin");
                p.palavrasReservadas.add("end");
                p.palavrasReservadas.add("var");
                p.palavrasReservadas.add("integer");
                p.palavrasReservadas.add("real");
                p.palavrasReservadas.add("array");
                p.palavrasReservadas.add("of");
                p.palavrasReservadas.add("procedure");
                p.palavrasReservadas.add("function");
                p.palavrasReservadas.add("read");
                p.palavrasReservadas.add("white");
                p.palavrasReservadas.add("for");
                p.palavrasReservadas.add("to");
                p.palavrasReservadas.add("do");
                p.palavrasReservadas.add("until");
                p.palavrasReservadas.add("repeat");
                p.palavrasReservadas.add("while");
                p.palavrasReservadas.add("if");
                p.palavrasReservadas.add("then");
                p.palavrasReservadas.add("else"); 
                p.palavrasReservadas.add("or");
                p.palavrasReservadas.add("and");
                p.palavrasReservadas.add("not");
                p.palavrasReservadas.add("true");
                p.palavrasReservadas.add("false");
                
            }
        });
        
        
        
        
    }

    public Lexema analisadorLexico(String texto) {
        Lexema item=null;
        if(index < texto.length()){
            while(texto.charAt(index) <= ' ' && index < texto.length()){
                if(texto.charAt(index) == '\n'){
                    linha++;
                    lastLine = index + 1;
                }
                index++;
            }
            String a = String.format("%c", texto.charAt(index));
            if (texto.charAt(index) > ' ' && index < texto.length()) {
                coluna = index-lastLine;
                item = classifica(a);
                jTextAreaItensLexicos.setText(
                        String.format("%s(Linha: %d, Coluna: %d) - %s - %s = %s\n",
                                jTextAreaItensLexicos.getText(),
                                 item.getLinha()+1, 
                                item.getColuna()+1, 
                                item.getDescricao(),
                                item.getClasse(),
                                item.getTexto())
                );
            }
        }
        return item;
    }

    public Lexema classifica(String a) {
        Lexema item = null;
        if (a.matches("[a-zA-Z]")) {
            item = identificador();
        } else {
            System.out.println("ok4");
            if (a.matches("\\d")) {
                System.out.println("ok5");
                item = numero();
                System.out.println("ok6");
            } else {
                if (a.equals("\"")) {
                    item = string();
                } else {
                    if (a.equals(":")) {
                        if (texto.charAt(index + 1) == '=') {
                            item = new Lexema(String.format("%c%c", texto.charAt(index), texto.charAt(index + 1)), "cAtr", "AtribuiÃ§Ã£o", linha, coluna);
                            index = index + 2;
                        } else {
                            item = new Lexema(a, "cDPto", "Dois Pontos", linha, coluna);
                            index++;
                        }
                    } else {
                        if (a.equals("(")) {
                            item = new Lexema(a, "cLPar", "Abre ParÃªnteses", linha, coluna);
                            index++;
                        } else {
                            if (a.equals(")")) {
                                item = new Lexema(a, "cRPar", "Fecha ParÃªnteses", linha, coluna);
                                index++;
                            } else {
                                if (a.equals("+")) {
                                    item = new Lexema(a, "cAdd", "AdiÃ§Ã£o", linha, coluna);
                                    index++;
                                } else {
                                    if (a.equals("-")) {
                                        item = new Lexema(a, "cSub", "SubtraÃ§Ã£o", linha, coluna);
                                        index++;
                                    } else {
                                        if (a.equals("*")) {
                                            item = new Lexema(a, "cMul", "MultiplicaÃ§Ã£o", linha, coluna);
                                            index++;
                                        } else {
                                            if (a.equals("/")) {
                                                item = new Lexema(a, "cDiv", "DivisÃ£o", linha, coluna);
                                                index++;
                                            } else {
                                                if (a.equals("=")) {
                                                    item = new Lexema(a, "cEQ", "Igual", linha, coluna);
                                                    index++;
                                                } else {
                                                    if (a.equals("<")) {
                                                        if (a.charAt(index + 1) == '=') {
                                                            item = new Lexema(String.format("%s%c", a, texto.charAt(index + 1)), "cLE", "Menor ou Igual", linha, coluna);
                                                            index = index + 2;
                                                        } else {
                                                            if (a.charAt(index + 1) == '>') {
                                                                item = new Lexema(String.format("%s%c", a, texto.charAt(index + 1)), "cNE", "Diferente", linha, coluna);
                                                                index = index + 2;
                                                            } else {
                                                                item = new Lexema(a, "cLT", "Menor", linha, coluna);
                                                                index++;
                                                            }
                                                        }
                                                    } else {
                                                        if (a.equals(">")) {
                                                            if (texto.charAt(index + 1) == '=') {
                                                                item = new Lexema(String.format("%s%c", a, texto.charAt(index + 1)), "cGE", "Maior ou Igual", linha, coluna);
                                                                index = index + 2;
                                                            } else {
                                                                item = new Lexema(a, "cGT", "Maior", linha, coluna);
                                                                index++;
                                                            }
                                                        } else {
                                                            if (a.equals(";")) {
                                                                item = new Lexema(a, "cPVir", "Ponto e Virgula", linha, coluna);
                                                                index++;
                                                            } else {
                                                                if (a.equals(",")) {
                                                                    item = new Lexema(a, "cVir", "Virgula", linha, coluna);
                                                                    index++;
                                                                } else {
                                                                    if (a.equals(".")) {
                                                                        item = new Lexema(a, "cPto", "Ponto", linha, coluna);
                                                                        index++;
                                                                    } else {
                                                                        if(a.equals("[")) {
                                                                            item = new Lexema(a, "cLCol", "Colchete esquerdo",linha, coluna);
                                                                            index++;
                                                                        } else {
                                                                            if(a.equals("]")) {
                                                                                item = new Lexema(a, "cRCol", "Colchete direito", linha, coluna);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                    }
                                }
                            }

                        }
                    }
                }
            }
        }

        return item;
    }

    public Lexema numero() {
        Lexema resultado;
        String c = new String();
        String leitor = String.format("%c", texto.charAt(index));
        System.out.println("ok7");
        do {
            System.out.println("ok8");
            c = leitor.substring(0);
            index++;
            if (index < texto.length()) {
                leitor = String.format("%s%c", leitor, texto.charAt(index));
            }

        } while ((leitor.matches("\\d+") || leitor.matches("\\d+[,][\\d][E e ][|-]?[\\d+]")) && index < texto.length());

        if (c.matches("[\\d]+")) {
            resultado = new Lexema(c, "cInt", "NÃºmero Inteiro", linha, coluna);
        } else {
            resultado = new Lexema(c, "cReal", "NÃºmero Real", linha, coluna);
        }

        return resultado;
    }

    public Lexema identificador() {
        String c = new String();
        Lexema resultado=null;
        String leitor = String.format("%c", texto.charAt(index));
        do {
            c = leitor.substring(0);
            index++;
            if (index < texto.length()) {
                leitor = String.format("%s%c", leitor, texto.charAt(index));
            }

        } while (leitor.matches("[\\w][\\w|\\d]+?") && index < texto.length());
        
        for(String s: palavrasReservadas){
            if(s.toLowerCase().equals(c.toLowerCase())){
                resultado = new Lexema(c, "cRes", "Palavra Reservada", linha, coluna);
            }
        }
        if(resultado ==null){
            resultado = new Lexema(c, "cId", "Identificador", linha, coluna);
        }
        

        return resultado;
    }

    public Lexema string() {
        String leitor = String.format("%c", texto.charAt(index));

        do {

            index++;
            leitor = String.format("%s%c", leitor, texto.charAt(index));

        } while (!(String.format("%c", texto.charAt(index)).equals("\"")) && index < texto.length());
        index++;
        Lexema resultado = new Lexema(leitor, "cStr", "String", linha, coluna);
        return resultado;
    }
    
    
    // -------------------ANALISADOR SITATICO---------------------------------
    
    
//<programa> ::= program id <corpo> .
public void programa(){
	if(comparaClasseLexema("cRes","program")){
		lexema = analisadorLexico(texto);
		if(comparaClasseLexema("cId",lexema.getTexto())){
                        lexema.setCategoria("program");
                        insereTabela();
			lexema = analisadorLexico(texto);
			corpo();
			if(comparaClasseLexema("cPto",".")){
				lexema = analisadorLexico(texto);
			} else {
				
				imprimeErro("cPto", ".");
			}
		} else {
			imprimeErro("cId",lexema.getTexto());
		}
	} else {
		imprimeErro("cRes", "program");
	}
}

    
//<corpo> ::= <declara> <rotina> begin <sentencas> end
public void corpo(){
	declara();
	rotina();
	bloco();
}

//<bloco> ::= begin <sentencas> end
public void bloco(){
    if(comparaClasseLexema("cRes","begin")){
            lexema = analisadorLexico(texto);
            sentencas();
            if(comparaClasseLexema("cRes","end")){
                    lexema = analisadorLexico(texto);
            } else {
                    imprimeErro("cRes","end");
            }
    } else {
            imprimeErro("cRes", "begin");
    }
}
    
//<declara> ::= var <dvar> <declara> | Ã¯ÂÂ¥
public void declara(){
	if(comparaClasseLexema("cRes","var")){
		lexema = analisadorLexico(texto);
		dvar();
		declara();
	}
}
    
    
    
 //<dvar> ::= <variaveis> : <tipo> ; <dvarL> 
public void dvar(){
	variaveis();
	if(comparaClasseLexema("cDPto",":")){
		lexema = analisadorLexico(texto);
		tipo();
                if(comparaClasseLexema("cPVir", ";")){
                    lexema = analisadorLexico(texto);
                    dvarL();
                } else {
                    imprimeErro("cPVir", ";");
                }
	} else {
		imprimeErro("cDPto", ":");
	}
}
   
    
//<dvarL> ::= <tipo_var> <dvarLL>
public void dvarL(){
	dvar();
}
    
    
////<dvarLL> ::= ; <dvar> | Ã¯ÂÂ¥
//public void dvarLL(){
//	if(comparaClasseLexema("cPVir",";")){
//        lexema= analisadorLexico(texto);
//         dvar();
//        }
//            
//}
    
    
////<tipo_var> ::= integer | real
//public void tipo_var(){
//	if(comparaClasseLexema("cRes","integer") || comparaClasseLexema("cRes","real")){
//		lexema = analisadorLexico(texto);
//	} else {
//		imprimeErro("cNum","Numero (inteiro ou real)");
//	}
//}

//<tipo> ::= <tipo_simples> | array <tipo_array>
public void tipo(){
    if(comparaClasseLexema("cRes", "array")){
        lexema = analisadorLexico(texto);
        tipo_array();
    } else {
        tipo_simples();
    }
}

//<tipo_simples> ::= integer | real
public void tipo_simples(){
    if(comparaClasseLexema("cRes", "real") || comparaClasseLexema("cRes", "integer")){
        lexema = analisadorLexico(texto);
    } else {
        imprimeErro("cRes", "real | integer");
    }
}

//<tipo_array> ::= [ <indice> ] of <tipo_simples>
public void tipo_array(){
    if(comparaClasseLexema("cLCol", "[")){
        lexema = analisadorLexico(texto);
        indice();
        if(comparaClasseLexema("cRCol", "]")){
            lexema = analisadorLexico(texto);
            if(comparaClasseLexema("cRes", "of")){
                lexema = analisadorLexico(texto);
                tipo_simples();
            } else {
                imprimeErro("cRes", "of");
            }
        } else {
            imprimeErro("cRCol", "]");
        }
    } else {
        imprimeErro("cLCol", "[");
    }
}
    
//<indice> ::= num
public void indice(){
    if(comparaClasseLexema("cInt", lexema.getTexto())){
        lexema = analisadorLexico(texto);
    } else {
        imprimeErro("cInt", "Numero inteiro");
    }
}



//<variaveis> ::= id <variaveisL>
public void variaveis(){
	if(comparaClasseLexema("cId",lexema.getTexto())){
                insereTabela();
		lexema = analisadorLexico(texto);
		variaveisL();
	} else {
		imprimeErro("cId", "identificador");
	}
}

    
//<variaveisL> ::= , id <variaveisL> | Ã¯ÂÂ¥
public void variaveisL(){
	if(comparaClasseLexema("cVir",",")){
		lexema = analisadorLexico(texto);
		if(comparaClasseLexema("cId",lexema.getTexto())){
			lexema = analisadorLexico(texto);
			variaveisL();
		} else {
			imprimeErro("cId", "identificador");
		}
	}
}
    
    
//<rotina> ::= procedure <procedimento> | function <funcao> | Ã¯ÂÂ¥
public void rotina(){
	if(comparaClasseLexema("cRes","procedure")){
		lexema = analisadorLexico(texto);
		procedimento();
	} else if(comparaClasseLexema("cRes", "function")){
		lexema = analisadorLexico(texto);
		funcao();
	}
}
    
    
//<procedimento> ::= id <parametros> ; <corpo> ; <rotina>
public void procedimento(){
	if(comparaClasseLexema("cId",lexema.getTexto())){
		lexema = analisadorLexico(texto);
		parametros();
		if(comparaClasseLexema("cPVir",";")){
			lexema = analisadorLexico(texto);
			corpo();
			if(comparaClasseLexema("cPVir",";")){
				lexema = analisadorLexico(texto);
				rotina();
			} else {
				imprimeErro("cPVir", ";");
			}
		} else {
			imprimeErro("cPVir", ";");
		}
	} else {
		imprimeErro("cId", "identificador");
	}
}

    
  
  //<funcao> ::= id <parametros> : <tipo_funcao> ; <corpo> ; <rotina>
public void funcao(){
	if(comparaClasseLexema("cId",lexema.getTexto())){
		lexema = analisadorLexico(texto);
		parametros();
		if(comparaClasseLexema("cDPto",":")){
			lexema = analisadorLexico(texto);
			tipo_simples();
			if(comparaClasseLexema("cPVir",";")){
				lexema = analisadorLexico(texto);
				corpo();
				if(comparaClasseLexema("cPVir",";")){
					lexema = analisadorLexico(texto);
					rotina();
				} else {
					imprimeErro("cPVir", ";");
				}
			} else {
				imprimeErro("cPVir", ";");
			}
		} else {
			imprimeErro("cPVir", ";");
		}
	} else {
		imprimeErro("cId", "identificador");
	}
}
  
    
    
    //<parametros> ::= ( <lista_parametros> ) | Ã¯ÂÂ¥
public void parametros(){
	if(comparaClasseLexema("cLPar","(")){
		lexema = analisadorLexico(texto);
		lista_parametros();
		if(comparaClasseLexema("cRPar", ")")){
			lexema = analisadorLexico(texto);
		} else {
			imprimeErro("cRPar",")");
		}
	}
}

    
    
    
    //<lista_parametros> ::= <lista_id> : <tipo_var> <lista_paremetrosL>
    public void lista_parametros(){
	lista_id();
	if(comparaClasseLexema("cDPto",":")){
		lexema = analisadorLexico(texto);
		tipo_var();
		lista_parametrosL();
	} else {
		imprimeErro("cDPto", ":");
	}
}

   
//<lista_parametrosL> ::=  ; <lista_parametros> | Ã¯ÂÂ¥
public void lista_parametrosL(){
	if(comparaClasseLexema("cPVir", ";")){
		lexema = analisadorLexico(texto);
		lista_parametros();
	}
}
    
    
//<lista_id> ::= id <listaidL>
public void lista_id(){
	if(comparaClasseLexema("cId", lexema.getTexto())){
		lexema = analisadorLexico(texto);
		lista_idL();
	} else {
		imprimeErro("cId","identificador");
	}
}
    
    
    
//<lista_idL> = , id <lista_idL> | Ã¯ÂÂ¥
public void lista_idL(){
	if(comparaClasseLexema("cVir",",")){
		lexema = analisadorLexico(texto);
		if(comparaClasseLexema("cId", lexema.getTexto())){
			lexema = analisadorLexico(texto);
			lista_idL();
		} else {
			imprimeErro("cId", "identificador");
		}
	}
}

    

//<tipo_funcao> ::= integer | real
public void tipo_funcao(){
	if(comparaClasseLexema("cRes", lexema.getTexto())){
		lexema = analisadorLexico(texto);
	} else {
		imprimeErro("cRes", "real ou integer");
	}
}


//<comando> ::= 		read ( <var_read> ) |
public void comando(){
	if(comparaClasseLexema("cRes", "read")){
		lexema = analisadorLexico(texto);
		if(comparaClasseLexema("cLPar", "(")){
			lexema = analisadorLexico(texto);
			var_read();
			if(comparaClasseLexema("cRPar", ")")){
				lexema = analisadorLexico(texto);
			} else {
				imprimeErro("cRPar", ")");
			}
		} else {
			imprimeErro("cLPar", "(");
		}
	} else if(comparaClasseLexema("cRes", "write")) {	//					 	write ( <var_write> ) |
		lexema = analisadorLexico(texto);
		if(comparaClasseLexema("cLPar", "(")){
			lexema = analisadorLexico(texto);
			var_write();
			if(comparaClasseLexema("cRPar", ")")){
				lexema = analisadorLexico(texto);
			} else {
				imprimeErro("cRPar", ")");
			}
		} else {
			imprimeErro("cLPar", "(");
		}
	} else if(comparaClasseLexema("cRes", "for")) {	//				 	 	for id := <expressao> to <expressao> do begin <sentencas> end |
		lexema = analisadorLexico(texto);
		if(comparaClasseLexema("cId", lexema.getTexto())){
			lexema = analisadorLexico(texto);
			if(comparaClasseLexema("cAtr",":=")){
				lexema = analisadorLexico(texto);
				expressao();
				if(comparaClasseLexema("cRes", "to")){
					lexema = analisadorLexico(texto);
					expressao();
					if(comparaClasseLexema("cRes", "do")){
						lexema = analisadorLexico(texto);
						if(comparaClasseLexema("cRes", "begin")){
							lexema = analisadorLexico(texto);
							sentencas();
							if(comparaClasseLexema("cRes", "end")){
								lexema = analisadorLexico(texto);
							} else {
								imprimeErro("cRes", "end");
							}
						} else {
							imprimeErro("cRes", "begin");
						}
					} else {
						imprimeErro("cRes", "do");
					}
				} else {
					imprimeErro("cRes", "to");
				}
			} else {
				imprimeErro("cAtr", ":=");
			}
		} else {
			imprimeErro("cId","identificador");
		}
	} else if(comparaClasseLexema("cRes", "repeat")) {	//				 	 	repeat <sentencas> until ( <condicao> ) |
		lexema = analisadorLexico(texto);
		sentencas();
		if(comparaClasseLexema("cRes", "until")){
			lexema = analisadorLexico(texto);
			if(comparaClasseLexema("cLPar", "(")){
				lexema = analisadorLexico(texto);
				condicao();
				if(comparaClasseLexema("cRPar", ")")){
					lexema = analisadorLexico(texto);
				} else {
					imprimeErro("cRPar", ")");
				}
			} else {
				imprimeErro("cLPar", "(");
			}
		} else {
			imprimeErro("cRes", "until");
		}
	} else if(comparaClasseLexema("cRes", "while")){	//				while ( <condicao> ) do begin <sentencas> end |
		lexema = analisadorLexico(texto);
		if(comparaClasseLexema("cLPar", "(")){
			lexema = analisadorLexico(texto);
			condicao();
			if(comparaClasseLexema("cRPar", ")")){
				lexema = analisadorLexico(texto);
				if(comparaClasseLexema("cRes", "do")){
					lexema = analisadorLexico(texto);
					if(comparaClasseLexema("cRes", "begin")){
						lexema = analisadorLexico(texto);
						sentencas();
						if(comparaClasseLexema("cRes", "end")){
							lexema = analisadorLexico(texto);
						} else {
							imprimeErro("cRes", "end");
						}
					} else {
						imprimeErro("cRes", "begin");
					}
				} else {
					imprimeErro("cRes", "do");
				}
			} else {
				imprimeErro("cRPar", ")");
			}
		} else {
			imprimeErro("cLPar", "(");
		}
	} else if(comparaClasseLexema("cRes", "if")){	//				if ( <condicao> ) then begin <sentencas> end <pfalsa> |
		lexema = analisadorLexico(texto);
		if(comparaClasseLexema("cLPar", "(")){
			lexema = analisadorLexico(texto);
			condicao();
			if(comparaClasseLexema("cRPar", ")")){
				lexema = analisadorLexico(texto);
				if(comparaClasseLexema("cRes", "then")){
					lexema = analisadorLexico(texto);
					if(comparaClasseLexema("cRes", "begin")){
						lexema = analisadorLexico(texto);
						sentencas();
						if(comparaClasseLexema("cRes", "end")){
							lexema = analisadorLexico(texto);
							pfalsa();
						} else {
							imprimeErro("cRes", "end");
						}
					} else {
						imprimeErro("cRes", "begin");
					}
				} else {
					imprimeErro("cRes", "then");
				}
			} else {
				imprimeErro("cRPar", ")");
			}
		} else {
			imprimeErro("cLPar", "(");
		}
	} else if(comparaClasseLexema("cId", lexema.getTexto())){	//	id <idL>
		lexema = analisadorLexico(texto);
		idL();
	}
}

    
    
    //	<idL> ::= <argumentos> | := <expressao>

public void idL(){
	if(comparaClasseLexema("cAtr", ":=")){
		lexema = analisadorLexico(texto);
		expressao();
	} else {
		argumentos();
	}
}

    
    //<sentencas> ::= <comando> <sentencasL>]
    public void sentencas(){
        comando();
        sentencasL();
    }
    
   public void sentencasL(){
       if(comparaClasseLexema("cPVir",";")){
           lexema=analisadorLexico(texto);
           sentencas();
       }
   }
   
   public void var_read(){
       if(comparaClasseLexema("cId", lexema.getTexto())){
           lexema = analisadorLexico(texto);
           var_readL();
       }else{
           imprimeErro("cId", lexema.getTexto());
       }
   }
   
   public void var_readL(){
       if(comparaClasseLexema("cVir", ",")){
           lexema = analisadorLexico(texto);
           var_read();
       }
   }
    
   public void var_write(){
       if(comparaClasseLexema("cId", lexema.getTexto())){
           lexema=analisadorLexico(texto);
           var_writeL();
       }else{
           imprimeErro("cId",lexema.getTexto());
       }
   }
    
   public void var_writeL(){
       if(comparaClasseLexema("cVir", ",")){
           lexema=analisadorLexico(texto);
           var_write();
       }else{
           imprimeErro("cVir", lexema.getTexto());
       }
   }
    
   public void argumentos(){
       if(comparaClasseLexema("cLPar", "(")){
           lexema=analisadorLexico(texto);
           lista_arg();
           if(comparaClasseLexema("cRPar", ")")){
               lexema = analisadorLexico(texto);
           }
            else{
               imprimeErro("cRPar", ")");
           }
       }
   }
   
   public void lista_arg(){
       expressao();
       lista_argL();
   }
   
   public void lista_argL(){
       if(comparaClasseLexema("cVir", ",")){
           lexema=analisadorLexico(texto);
           lista_arg();
       }
   }
   
   public void condicao(){
       expressao();
       relacao();
       expressao();
   }
   
   public void pfalsa(){
       if(comparaClasseLexema("cRes", "else")){
           lexema = analisadorLexico(texto);
           if(comparaClasseLexema("cRes", "begin")){
               lexema = analisadorLexico(texto);
               sentencas();
               if(comparaClasseLexema("cRes","end")){
                   lexema = analisadorLexico(texto);
               }else{
                   imprimeErro("cRes", "end");
               }
           }else{
               imprimeErro("cRes", "begin");
           }
      }
   }
   
   //aqui
   public void relacao(){
       if(comparaClasseLexema("cEQ", "=")){
           lexema=analisadorLexico(texto);
       }else{
           if(comparaClasseLexema("cGT", ">")){
               lexema=analisadorLexico(texto);
           }else{
               if(comparaClasseLexema("cLT", "<")){
                   lexema = analisadorLexico(texto);
                  
               }else{
                   if(comparaClasseLexema("cGE", ">=")){
                       lexema=analisadorLexico(texto);
                   }else{
                       if(comparaClasseLexema("cLE", "<=")){
                           lexema=analisadorLexico(texto);
                       }else{
                           if(comparaClasseLexema("cNE", "<>")){
                               lexema=analisadorLexico(texto);
                           }else{
                               imprimeErro("cEQ | cGT | cLT | cGE | cLE | cNE", "= | > | < | >= | <= | <>");
                           }
                       }
                   }
               }
           }
       }
   }
   
   public void expressao(){
       termo();
       expressaoL();
   }
   
   public void expressaoL(){
       if(comparaClasseLexema("cAdd", "+")){
           lexema=analisadorLexico(texto);
           termo();
           expressaoL();
       }else{
           if(comparaClasseLexema("cSub", "-")){
               lexema = analisadorLexico(texto);
               termo();
               expressaoL();
           }
        }
           
   }
   
   public void termo(){
        fator();
        termoL();
   }
   
   public void termoL(){
       if(comparaClasseLexema("cMul", "*")){
           lexema = analisadorLexico(texto);
           fator();
           termoL();
       }else{
           if(comparaClasseLexema("cDiv", "/")){
               lexema = analisadorLexico(texto);
               fator();
               termoL();
           }
       }
   }
   
   public void fator(){
       if(comparaClasseLexema("cId", lexema.getTexto())){
           lexema = analisadorLexico(texto);
           fatorL();
       }else{
           if(comparaClasseLexema("cInt", lexema.getTexto()) || comparaClasseLexema("cReal", lexema.getTexto())){
                lexema = analisadorLexico(texto);
           }else{
               if(comparaClasseLexema("cLPar", "(")){
                   lexema=analisadorLexico(texto);
                   expressao();
                   if(comparaClasseLexema("cRpar", ")")){
                       lexema=analisadorLexico(texto);
                   }else{
                       imprimeErro("cRpar", ")");
                   }
               }else{
                   imprimeErro("cLPar | cInt | cId", "( | Inteiro | Identificador");
               }
           }
               
       }
   }
   
   
   public void fatorL(){
       argumentos();
   }
   
    public boolean comparaClasseLexema(String classe, String texto){
	boolean v = false;
	if(lexema.getClasse().equals(classe) && lexema.getTexto().equals(texto))
		v = true;
	return v;
    }

    public void imprimeErro(String classe, String description){
        erro = true;
        System.out.println("Na linha "+ (lexema.getLinha()+1)+" :\n");
        if(classe.equals("com")){
            errorDescription = String.format("Comando '%s' nÃ£o reconhecido", description);
        } else{
            if(classe.matches("cRes\\w*")){
                errorDescription = String.format("Palavra reservada %s esperado.\n", description);
            } else {
                errorDescription = String.format("'%s' esperado.\n", description);
                }
            }
       
        System.out.println(errorDescription + " \n " + lexema.getTexto());
    
    }
    
    public void insereTabela(){
        
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAbrir;
    private javax.swing.JButton jButtonCompilar;
    private javax.swing.JButton jButtonExecutar;
    private javax.swing.JButton jButtonNovo;
    private javax.swing.JButton jButtonSair;
    private javax.swing.JButton jButtonSalvar;
    private javax.swing.JMenu jMenuArquivo;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemAbrir;
    private javax.swing.JMenuItem jMenuItemCompilar;
    private javax.swing.JMenuItem jMenuItemExecutar;
    private javax.swing.JMenuItem jMenuItemFechar;
    private javax.swing.JMenuItem jMenuItemNovo;
    private javax.swing.JMenuItem jMenuItemSair;
    private javax.swing.JMenuItem jMenuItemSalvar;
    private javax.swing.JMenuItem jMenuItemSalvarComo;
    private javax.swing.JMenu jMenuProjeto;
    private javax.swing.JMenu jMenuSobre;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPaneMepa;
    private javax.swing.JTabbedPane jTabbedPanePainel;
    private javax.swing.JTable jTableTabelaDeSimbolos;
    private javax.swing.JTextArea jTextAreaItensLexicos;
    private javax.swing.JTextPane jTextPaneFonte;
    // End of variables declaration//GEN-END:variables
}

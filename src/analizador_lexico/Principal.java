/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package analizador_lexico;

/**
 *
 * @author framc
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
    }

    int linha = 0;
    int coluna = 0;
    int index = 0;
    int lastLine = 0;

    String texto;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonNovo = new javax.swing.JButton();
        jButtonAbrir = new javax.swing.JButton();
        jButtonSalvar = new javax.swing.JButton();
        jButtonCompilar = new javax.swing.JButton();
        jButtonExecutar = new javax.swing.JButton();
        jButtonSair = new javax.swing.JButton();
        jTabbedPanePainel = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPaneFonte = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableTabelaDeSimbolos = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextAreaItensLexicos = new javax.swing.JTextArea();
        jTabbedPaneMepa = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuArquivo = new javax.swing.JMenu();
        jMenuItemNovo = new javax.swing.JMenuItem();
        jMenuItemAbrir = new javax.swing.JMenuItem();
        jMenuItemFechar = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemSalvar = new javax.swing.JMenuItem();
        jMenuItemSalvarComo = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItemSair = new javax.swing.JMenuItem();
        jMenuProjeto = new javax.swing.JMenu();
        jMenuItemCompilar = new javax.swing.JMenuItem();
        jMenuItemExecutar = new javax.swing.JMenuItem();
        jMenuSobre = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonNovo.setText("Novo");
        jButtonNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNovoActionPerformed(evt);
            }
        });

        jButtonAbrir.setText("Abrir");

        jButtonSalvar.setText("Salvar");

        jButtonCompilar.setText("Compilar");
        jButtonCompilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCompilarActionPerformed(evt);
            }
        });

        jButtonExecutar.setText("Executar");
        jButtonExecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExecutarActionPerformed(evt);
            }
        });

        jButtonSair.setText("Sair");

        jScrollPane1.setViewportView(jTextPaneFonte);

        jTabbedPanePainel.addTab("Fonte", jScrollPane1);

        jTableTabelaDeSimbolos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTableTabelaDeSimbolos);

        jTabbedPanePainel.addTab("Tabela de Simbolos", jScrollPane2);

        jTextAreaItensLexicos.setColumns(20);
        jTextAreaItensLexicos.setRows(5);
        jScrollPane3.setViewportView(jTextAreaItensLexicos);

        jTabbedPanePainel.addTab("Iten LÃ©xicos", jScrollPane3);
        jTabbedPanePainel.addTab("Mepa", jTabbedPaneMepa);

        jMenuArquivo.setText("Arquivo");

        jMenuItemNovo.setText("Novo");
        jMenuArquivo.add(jMenuItemNovo);

        jMenuItemAbrir.setText("Abrir");
        jMenuArquivo.add(jMenuItemAbrir);

        jMenuItemFechar.setText("Fechar");
        jMenuArquivo.add(jMenuItemFechar);
        jMenuArquivo.add(jSeparator1);

        jMenuItemSalvar.setText("Salvar");
        jMenuArquivo.add(jMenuItemSalvar);

        jMenuItemSalvarComo.setText("Salvar como");
        jMenuArquivo.add(jMenuItemSalvarComo);
        jMenuArquivo.add(jSeparator2);

        jMenuItemSair.setText("Sair");
        jMenuArquivo.add(jMenuItemSair);

        jMenuBar1.add(jMenuArquivo);

        jMenuProjeto.setText("Projeto");

        jMenuItemCompilar.setText("Compilar");
        jMenuProjeto.add(jMenuItemCompilar);

        jMenuItemExecutar.setText("Executar");
        jMenuProjeto.add(jMenuItemExecutar);

        jMenuBar1.add(jMenuProjeto);

        jMenuSobre.setText("Sobre");
        jMenuBar1.add(jMenuSobre);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButtonNovo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonAbrir)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonSalvar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonCompilar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonExecutar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonSair)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jTabbedPanePainel, javax.swing.GroupLayout.DEFAULT_SIZE, 608, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonNovo)
                    .addComponent(jButtonAbrir)
                    .addComponent(jButtonSalvar)
                    .addComponent(jButtonCompilar)
                    .addComponent(jButtonExecutar)
                    .addComponent(jButtonSair))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPanePainel, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonExecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExecutarActionPerformed

    }//GEN-LAST:event_jButtonExecutarActionPerformed

    private void jButtonCompilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCompilarActionPerformed
        texto = jTextPaneFonte.getText().toString();
        while(index < texto.length()){
            analisadorLexico(texto);
        }

    }//GEN-LAST:event_jButtonCompilarActionPerformed

    private void jButtonNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNovoActionPerformed
        jTextPaneFonte.setText("");
        jTextAreaItensLexicos.setText("");
    }//GEN-LAST:event_jButtonNovoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });

    }

    public void analisadorLexico(String texto) {
        String a = String.format("%c", texto.charAt(index));
        if (texto.charAt(index) > ' ') {
            coluna = index-lastLine;
            Lexema item = classifica(a);
            jTextAreaItensLexicos.setText(
                    String.format("%s(Linha: %d, Coluna: %d) - %s - %s = %s\n",
                            jTextAreaItensLexicos.getText(),
                             item.getLinha()+1, 
                            item.getColuna()+1, 
                            item.getDescricao(),
                            item.getClasse(),
                            item.getTexto())
            );
        } else {
            if(texto.charAt(index) == '\n'){
                linha++;
                lastLine = index + 1;
            }
            index++;
        }
    }

    public Lexema classifica(String a) {
        Lexema item = null;
        if (a.matches("[a-zA-Z]")) {
            item = identificador();
        } else {
            System.out.println("ok4");
            if (a.matches("\\d")) {
                System.out.println("ok5");
                item = numero();
                System.out.println("ok6");
            } else {
                if (a.equals("\"")) {
                    item = string();
                } else {
                    if (a.equals(":")) {
                        if (texto.charAt(index + 1) == '=') {
                            item = new Lexema(String.format("%c%c", texto.charAt(index), texto.charAt(index + 1)), "cAtr", "AtribuiÃ§Ã£o", linha, coluna);
                            index = index + 2;
                        } else {
                            item = new Lexema(a, "cDPto", "Dois Pontos", linha, coluna);
                            index++;
                        }
                    } else {
                        if (a.equals("(")) {
                            item = new Lexema(a, "cLPar", "Abre ParÃªnteses", linha, coluna);
                            index++;
                        } else {
                            if (a.equals(")")) {
                                item = new Lexema(a, "cRPar", "Fecha ParÃªnteses", linha, coluna);
                                index++;
                            } else {
                                if (a.equals("+")) {
                                    item = new Lexema(a, "cAdd", "AdiÃ§Ã£o", linha, coluna);
                                    index++;
                                } else {
                                    if (a.equals("-")) {
                                        item = new Lexema(a, "cSub", "SubtraÃ§Ã£o", linha, coluna);
                                        index++;
                                    } else {
                                        if (a.equals("*")) {
                                            item = new Lexema(a, "cMul", "MultiplicaÃ§Ã£o", linha, coluna);
                                            index++;
                                        } else {
                                            if (a.equals("/")) {
                                                item = new Lexema(a, "cDiv", "DivisÃ£o", linha, coluna);
                                                index++;
                                            } else {
                                                if (a.equals("=")) {
                                                    item = new Lexema(a, "cEQ", "Igual", linha, coluna);
                                                    index++;
                                                } else {
                                                    if (a.equals("<")) {
                                                        if (a.charAt(index + 1) == '=') {
                                                            item = new Lexema(String.format("%s%c", a, texto.charAt(index + 1)), "cLE", "Menor ou Igual", linha, coluna);
                                                            index = index + 2;
                                                        } else {
                                                            if (a.charAt(index + 1) == '>') {
                                                                item = new Lexema(String.format("%s%c", a, texto.charAt(index + 1)), "cNE", "Diferente", linha, coluna);
                                                                index = index + 2;
                                                            } else {
                                                                item = new Lexema(a, "cLT", "Menor", linha, coluna);
                                                                index++;
                                                            }
                                                        }
                                                    } else {
                                                        if (a.equals(">")) {
                                                            if (texto.charAt(index + 1) == '=') {
                                                                item = new Lexema(String.format("%s%c", a, texto.charAt(index + 1)), "cGE", "Maior ou Igual", linha, coluna);
                                                                index = index + 2;
                                                            } else {
                                                                item = new Lexema(a, "cGT", "Maior", linha, coluna);
                                                                index++;
                                                            }
                                                        } else {
                                                            if (a.equals(";")) {
                                                                item = new Lexema(a, "cPVir", "Ponto e Virgula", linha, coluna);
                                                                index++;
                                                            } else {
                                                                if (a.equals(",")) {
                                                                    item = new Lexema(a, "cVir", "Virgula", linha, coluna);
                                                                    index++;
                                                                } else {
                                                                    if (a.equals(".")) {
                                                                        item = new Lexema(a, "cPto", "Ponto", linha, coluna);
                                                                        index++;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                    }
                                }
                            }

                        }
                    }
                }
            }
        }

        return item;
    }

    public Lexema numero() {
        Lexema resultado;
        String c = new String();
        String leitor = String.format("%c", texto.charAt(index));
        System.out.println("ok7");
        do {
            System.out.println("ok8");
            c = leitor.substring(0);
            index++;
            if (index < texto.length()) {
                leitor = String.format("%s%c", leitor, texto.charAt(index));
            }

        } while ((leitor.matches("\\d+") || leitor.matches("\\d+[,][\\d][E e ][|-]?[\\d+]")) && index < texto.length());

        if (c.matches("[\\d]+")) {
            resultado = new Lexema(c, "cInt", "NÃºmero Inteiro", linha, coluna);
        } else {
            resultado = new Lexema(c, "cReal", "NÃºmero Real", linha, coluna);
        }

        return resultado;
    }

    public Lexema identificador() {
        String c = new String();
        String leitor = String.format("%c", texto.charAt(index));
        do {
            c = leitor.substring(0);
            index++;
            if (index < texto.length()) {
                leitor = String.format("%s%c", leitor, texto.charAt(index));
            }

        } while (leitor.matches("[\\w][\\w|\\d]+?") && index < texto.length());
        Lexema resultado = new Lexema(c, "cId", "Identificador", linha, coluna);

        return resultado;
    }

    public Lexema string() {
        String leitor = String.format("%c", texto.charAt(index));

        do {

            index++;
            leitor = String.format("%s%c", leitor, texto.charAt(index));

        } while (!(String.format("%c", texto.charAt(index)).equals("\"")) && index < texto.length());
        index++;
        Lexema resultado = new Lexema(leitor, "cStr", "String", linha, coluna);
        return resultado;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAbrir;
    private javax.swing.JButton jButtonCompilar;
    private javax.swing.JButton jButtonExecutar;
    private javax.swing.JButton jButtonNovo;
    private javax.swing.JButton jButtonSair;
    private javax.swing.JButton jButtonSalvar;
    private javax.swing.JMenu jMenuArquivo;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemAbrir;
    private javax.swing.JMenuItem jMenuItemCompilar;
    private javax.swing.JMenuItem jMenuItemExecutar;
    private javax.swing.JMenuItem jMenuItemFechar;
    private javax.swing.JMenuItem jMenuItemNovo;
    private javax.swing.JMenuItem jMenuItemSair;
    private javax.swing.JMenuItem jMenuItemSalvar;
    private javax.swing.JMenuItem jMenuItemSalvarComo;
    private javax.swing.JMenu jMenuProjeto;
    private javax.swing.JMenu jMenuSobre;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPaneMepa;
    private javax.swing.JTabbedPane jTabbedPanePainel;
    private javax.swing.JTable jTableTabelaDeSimbolos;
    private javax.swing.JTextArea jTextAreaItensLexicos;
    private javax.swing.JTextPane jTextPaneFonte;
    // End of variables declaration//GEN-END:variables
}

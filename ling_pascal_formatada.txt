			------- Murilo 
<programa> ::= program id <corpo> •
<corpo> ::= <declara> <rotina> begin <sentencas> end
<declara> ::= var <dvar> <declara> | 
<dvar> ::= <variaveis> : <dvarL> 
<dvarL> ::= <tipo_var> <dvarLL>
<dvarLL> ::= ; <dvar> | 
<tipo_var> ::= integer | real
<variaveis> ::= id <variaveisL>
<variaveisL> ::= , id <variaveisL> | 
<rotina> ::= procedure <procedimento> | function <funcao> | 
<procedimento> ::= id <parametros> ; <corpo> ; <rotina>
<funcao> ::= id <parametros> : <tipo_funcao> ; <corpo> ; <rotina>
<parametros> ::= ( <lista_parametros> ) | 
<lista_parametros> ::= <lista_id> : <tipo_var> <lista_paremetrosL>
<lista_parametrosL> ::=  ; <lista_parametros> | 
<lista_id> ::= id <listaidL>
<lista_idL> = , id <lista_idL> | 
<tipo_funcao> ::= integer | real
<comando> ::= 		read ( <var_read> ) |
				 	write ( <var_write> ) |
			 	 	for id := <expressao> to <expressao> do begin <sentencas> end |
			 	 	repeat <sentencas> until ( <condicao> ) |
					while ( <condicao> ) do begin <sentencas> end |
					if ( <condicao> ) then begin <sentencas> end <pfalsa> |
					id <idL>
idL ::= <argumentos> | := <expressao>
					---Francisco
<sentencas> ::= <comando> <sentencasL>
<sentencasL> ::= ; <sentencas> | 
<var_read> ::= id <var_readL>
<var_readL> ::= , <var_read> | 
<var_write> ::= id <var_writeL>
<var_writeL> :: , <var_write> | 
<argumentos> ::= ( <lista_arg> ) | 
<lista_arg> ::= <expressao> <lista_argL>
<lista_argL> ::= , <lista_arg> | 
<condicao> ::= <expressao> <relacao> <expressao>
<pfalsa> ::= else begin <sentencas> end | 
<relacao> ::= = | > | < | >= | < <relacaoL>
<relacaoL> ::= = | >
<expressao> ::= <termo><expressaoL>
<expressaoL> ::= + <termo> <expressaoL> | - <termo> <expressaoL> | 
<termo> ::= <fator> <termoL>
<termoL> ::= * <fator> <termoL> | / <fator> <termoL> | 
<fator> ::= id <fatorL> | num | ( <expressao> )
<fatorL> ::= <argumentos> | 



id 				-> letra (letra | digito)*
num 				-> digito+ | digito+ . digito+



####--------Correções---------#####
legenda:
					-> m = 	modificar funcao já existente
					-> a = 	adicionar funcao nova


<corpo> ::= <declara> <rotina> <bloco> 				-> m 	ok

<bloco> ::= begin <sentencas> end 				-> a 	ok

<dvar> ::= <variaveis> : <tipo> ; <dvarL> 				-> m 	ok
<dvarL> ::= <dvar> | 

<tipo> ::= <tipo_simples> | array <tipo_array> 				-> a 	ok

<tipo_simples> ::= integer | real 				-> a 	ok

<tipo_array> ::= [ <indice> ] of <tipo_simples> 				-> a 	ok

<indice> ::= num 				-> a 	ok

<procedimento> ::= procedure id <parametros> ; <corpo> ; <rotina> 				-> m 	ok

<funcao> ::= function id <parametros> : <tipo_simples> ; <corpo> ; <rotina> 				-> m 	ok

<var_read> ::= id_variavel <var_readL>				-> a

<var_readL> ::= , <var_read> | 				-> a

<var_write> ::= id_variavel 			-> a

<var_writeL> ::= , <var_white> | 			-> a

<comando> ::=			 													-> m
				read ( <var_read> ) |
				write ( <var_write> ) |
				for id_variavel := <expressao> to <expressao> do <bloco> |
				repeat <sentencas> until ( <expressao_logica> ) |
				while ( <expressao_logica> ) do <bloco> |
				if ( <expressao_logica> ) then <bloco> <pfalsa> |
				id_variavel := <expressao> |
				<chamada_procedimento>

<chamada_procedimento> ::= id_procedimento <argumentos> 				-> a


<pfalsa> ::= else <bloco> | 				-> m

<expressao_logica> ::= <termo_logico> <expressao_logicaL>		-> a

<expressao_logicaL> ::= or <termo_logico> <expressao_logicaL> | 			->a

<termo_logico> ::= <fator_logico> <termo_logicoL>				-> a

<termo_logicoL> ::= and <fator_logico> <termo_logicoL> | 

<fator_logico> ::= <relacional> | ( <expressao_logica> ) | not	<fator_logico> | true | false			-> a

<relacional> ::= <expressao> <relacao> <expressao>				-> a

<expressao> ::= <termo> <expressaoL>				-> m

<expressaoL> ::= <operador_adicao> <termo> <expressaoL> | 			-> m

<operador_adicao> ::= + | -				-> a

<termo> ::= <fator> <termoL>		-> m

<termoL> ::= <operador_multiplicacao> <fator> <termoL> | 			-> m

<operador_multiplicacao> ::= * | / | and -> a

<funcao> ::= id_funcao <argumentos>		-> a

<variavel> ::= id_variavel_simples | id_variavel_array [ <expressao> ]		-> a

id 				-> letra (letra | digito)*

num 				-> digito+ | digito+ . digito+